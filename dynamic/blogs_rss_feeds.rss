<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Aggregated Feed of KDevelop Developer's blog posts</title>
<link>http://www.kdevelop.org/</link>
<atom:link href="http://www.kdevelop.org/dynamic/blogs_rss_feeds.rss" rel="self" type="application/rss+xml" />
<description>
Aggregated Feed of KDevelop Developer's blog posts.
</description>
<language>en-us</language>
<item>
  <title>Friedrich Kossebau (frinring): Minitutorial: Viewing raw data of files in Konqueror/KDevelop</title>
  <link>http://frinring.wordpress.com/2009/07/24/shorttip-viewing-raw-data-of-files-in-konquerorkdevelop/</link>
  <guid>http://frinring.wordpress.com/?p=319</guid>
    <pubDate>Fri, 24 Jul 2009 15:28:20 +0200</pubDate>
  <description>
&lt;div&gt;&lt;br /&gt;&lt;p&gt;Want to quickly see the raw data of files in Konqueror or KDevelop? This is possible with the KPart coming with Okteta since KDE 4.1:&lt;/p&gt;
&lt;h3&gt;Preparations&lt;/h3&gt;
&lt;p&gt;Open &amp;#8220;System Settings&amp;#8221;, then select &amp;#8220;File Associations&amp;#8221; (Found under &amp;#8220;Advanced&amp;#8221;). Select the file type (e.g. &amp;#8220;audio/x-wav&amp;#8221;) you want to see the raw data of, choose the tab &amp;#8220;Embedding&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Within &amp;#8220;Services Preference Order&amp;#8221; press button &amp;#8220;Add&amp;#8221;, select &amp;#8220;Embedded Binary Viewer (oktetapart)&amp;#8221; [0] from the list, press &amp;#8220;OK&amp;#8221;:&lt;br /&gt;
&lt;a href="http://frinring.files.wordpress.com/2009/07/file-associations-add-service.png"&gt;&lt;img src="http://frinring.files.wordpress.com/2009/07/file-associations-add-service.png?w=226&amp;h=300" alt="File Associations - Add Service" title="File Associations - Add Service" width="226" height="300" class="alignnone size-medium wp-image-321" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If there are already other services listed in the services list make sure the oktetapart is the first entry by selecting it and pressing &amp;#8220;Move Up&amp;#8221; as often as needed. Press &amp;#8220;Apply&amp;#8221; and close the System Settings:&lt;br /&gt;
&lt;a href="http://frinring.files.wordpress.com/2009/07/file-associations1.png"&gt;&lt;img src="http://frinring.files.wordpress.com/2009/07/file-associations1.png?w=300&amp;h=231" alt="File Associations" title="File Associations" width="300" height="231" class="alignnone size-medium wp-image-320" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[0] Binary Viewer is a misnomer, changed to Hex Viewer for KDE 4.4&lt;/p&gt;
&lt;h3&gt;Usage&lt;/h3&gt;
&lt;p&gt;Now start Konqueror and click with your right mouse button on a wav file. In the context menu select &amp;#8220;Preview in Embedded Binary Viewer&amp;#8221; and you should see the raw data of that file:&lt;br /&gt;
&lt;a href="http://frinring.files.wordpress.com/2009/07/hex-view-in-konqueror.png"&gt;&lt;img src="http://frinring.files.wordpress.com/2009/07/hex-view-in-konqueror.png?w=300&amp;h=154" alt="Hex View in Konqueror" title="Hex View in Konqueror" width="300" height="154" class="alignnone size-medium wp-image-322" /&gt;&lt;/a&gt;&lt;br /&gt;
In KDevelop you do as you do with text files, just select a wav file and it will be shown as hex view:&lt;br /&gt;
&lt;a href="http://frinring.files.wordpress.com/2009/07/hex-view-in-kdevelop.png"&gt;&lt;img src="http://frinring.files.wordpress.com/2009/07/hex-view-in-kdevelop.png?w=300&amp;h=174" alt="Hex View in KDevelop" title="Hex View in KDevelop" width="300" height="174" class="alignnone size-medium wp-image-324" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Beware: This viewer is only read-only. And while using the Okteta core libs it currently does not come with any of the tools included in Okteta. This hopefully will change for KDE 4.4, but don&amp;#8217;t hold your breath (better sit down and help with coding &lt;img src="http://s.wordpress.com/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley" /&gt;  ).&lt;/p&gt;
&lt;h3&gt;Undo&lt;/h3&gt;
&lt;p&gt;If you want to undo this change for the file type, go to the settings as described above, select &amp;#8220;Embedded Binary Viewer (oktetapart)&amp;#8221; in the list under  &amp;#8220;Services Preference Order&amp;#8221; and press &amp;#8220;Remove&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Next to do: Copy this tutorial to &lt;a href="http://userbase.kde.org/"&gt;UserBase&lt;/a&gt;.&lt;/p&gt;
  &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/frinring.wordpress.com/319/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/frinring.wordpress.com/319/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godelicious/frinring.wordpress.com/319/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/frinring.wordpress.com/319/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gostumble/frinring.wordpress.com/319/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/frinring.wordpress.com/319/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godigg/frinring.wordpress.com/319/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/frinring.wordpress.com/319/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/goreddit/frinring.wordpress.com/319/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/frinring.wordpress.com/319/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=frinring.wordpress.com&amp;blog=251139&amp;post=319&amp;subd=frinring&amp;ref=&amp;feed=1" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Nick Shaforostoff (shaforostoff): Testing KDE 4.3 translation with Lokalize</title>
  <link>http://shaforostoff.blogspot.com/2009/07/testing-kde-43-translation-with.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-8446359260434483152.post-7202817933332798505</guid>
    <pubDate>Fri, 24 Jul 2009 04:57:20 +0200</pubDate>
  <description>
I created Lokalize script to automate UI translation testing: it compiles currently opened PO file and puts it under ~/.kde where KDE can see it, so that when you start your application next time, it will use your translation.&lt;br /&gt;&lt;br /&gt;To use it for your language (you'll need Lokalize coming with KDE 4.3):&lt;br /&gt;&lt;code&gt;&lt;br /&gt;cd trunk/l10n-kde4&lt;br /&gt;svn up scripts&lt;br /&gt;dolphin scripts/lokalize&lt;br /&gt;&lt;/code&gt;&lt;br /&gt;then open Lokalize with project for your language, go to Project -&gt; Configure project -&gt; Scripts and drag-n-drop msgfmt.rc from dolphin to the settings area in Lokalize. Restart Lokalize. You should see a new item under Tools menu.&lt;br /&gt;&lt;br /&gt;To make this script available automatically for all your team members copy &lt;a href="http://websvn.kde.org/trunk/l10n-kde4/ru/lokalize-scripts/msgfmt.rc?view=log"&gt;this msgfmt.rc&lt;/a&gt; to l10n-kde4/LANG/lokalize-scripts (they will also need to &lt;code&gt;svn up trunk/l10n-kde4/scripts&lt;/code&gt;).&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Now a few words on packages.&lt;br /&gt;I have been given write access to Debian KDE packaging repository (thanks to Sune Vuorela), where I was able to specify right dependencies and recommended packages for Lokalize. If any of other distro packagers are reading this, please sip on &lt;a href="http://svn.debian.org/viewsvn/pkg-kde/trunk/packages/kdesdk/debian/control?view=log"&gt;the spec&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;P.S. I installed kde 4.2.96 packages from debian experimental (it conflicts with kdevelop package, so I reinstalled kdevelop manually with &lt;code&gt;dpkg -i kdevelop_3.9.94-1_i386.deb&lt;/code&gt; afterwards).&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/8446359260434483152-7202817933332798505?l=shaforostoff.blogspot.com" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>#3: Visualize your code in KDevelop</title>
  <link>http://liveblue.wordpress.com/2009/07/21/3-visualize-your-code-in-kdevelop/</link>
  <guid>http://liveblue.wordpress.com/?p=205</guid>
  <author>Sandro Andrade</author>
  <pubDate>Tue, 21 Jul 2009 16:55:32 +0200</pubDate>
  <description>
Hello planet,
Yes, after a hard journey through free software conferences including International Forum on Free Software (FISL) and Gran Canaria Desktop Summit, I&amp;#8217;m happy to bring you fresh news about my GSoC project in KDevelop.
As I&amp;#8217;ve previously mentioned, not rarely we face the hard task of understanding complex interactions between software modules as a pre-requisite [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=liveblue.wordpress.com&amp;blog=7344330&amp;post=205&amp;subd=liveblue&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>Live Blue has Talent</title>
  <link>http://liveblue.wordpress.com/2009/07/14/live-blue-has-talent/</link>
  <guid>http://liveblue.wordpress.com/?p=201</guid>
  <author>tumaix</author>
  <pubDate>Tue, 14 Jul 2009 18:50:37 +0200</pubDate>
  <description>
So, You may think that we are just a bunch of guys sitting in front of our computers, programming for KDevelop , KDE-Edu and KDE-Games, right?
well, WRONG. as you can see on the video below, we also have Talent!

This is André Brasil,  fellow hackers, applauses.
       &lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=liveblue.wordpress.com&amp;blog=7344330&amp;post=201&amp;subd=liveblue&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>GSOC 2009 Progress - Smoke Bindings Generator</title>
  <link>http://www.kdedevelopers.org/node/4019</link>
  <guid isPermaLink="false">4019 at http://www.kdedevelopers.org</guid>
  <author>richard dale</author>
  <pubDate>Fri, 10 Jul 2009 21:32:38 +0200</pubDate>
  <description>
&lt;p&gt;Yesterday I wore my GSOC tee-shirt at GCDS and got together with Arno Rehn to review his smoke bindings library generator tool. It turns out the project is going great and is pretty much finished.&lt;/p&gt;
&lt;p&gt;I can't say I've done a lot of mentoring other than to have an initial discussion about which variant of Roberto Raggi's C++ parsers to use. We chose to use the KDevelop one with some KDE dependencies removed, although in fact from Roberto's comments on &lt;a&gt;Arno's blog&lt;/a&gt; it might have been best to use the Qt Creator one.&lt;/p&gt;
&lt;p&gt;To test the generator, first I dumped off all methods in the current version of the smoke library for the Qt libs using the 'rbqtapi' tool that comes with QtRuby. Then we built the same lib with the new smoke generator, and dumped off the methods in that into another text file and compared them with Kompare. There we a few minor things wrong like constructors being marked as 'static' methods, but nearly always the new compiler was giving better results than the previous Perl version.&lt;/p&gt;
&lt;p&gt;This is really good news for language bindings, as for KDE 4.4 we will be able to install the smoke generator as a binary, put up some instructions on TechBase explaining what to do in order to create a Smoke library for your KDE app or library. Mainly you just need to create a list of the C++ classes you want to wrap in an XML file, give it the headers to parse, and you're done. I've already got a script to create a Smoke lib based Ruby extension to use with QtRuby/Korundum, and we can automate that part too. We will be able to move individual bindings out of the kdebindings module and put them in with the app or lib that they wrap. Then we can just have the bindings tools and the core Qt and KDE libs stuff in kdebindings itself.&lt;/p&gt;
&lt;p&gt;So congratulations to Arno for doing such a great job, and also delivering one month ahead of schedule (my summary comment on the Google mid-term review was 'Absolutely excellent!').&lt;/p&gt;  </description>
</item>
<item>
  <title>Setting up Environment for running KDevelop4</title>
  <link>http://apaku.wordpress.com/2009/06/24/setting-up-environment-for-running-kdevelop4/</link>
  <guid>http://apaku.wordpress.com/?p=129</guid>
  <author>apaku</author>
  <pubDate>Wed, 24 Jun 2009 21:35:15 +0200</pubDate>
  <description>
These are short and (hopefully) precise instructions what you need to do when you&amp;#8217;ve built KDevelop4 from source and installed it somewhere other than your KDE libraries are (those are often from packages and then installed in /usr or /opt/kde).
I&amp;#8217;m assuming here that you have the KDE libraries installed in /usr (i.e. from some packages) [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=apaku.wordpress.com&amp;blog=1182522&amp;post=129&amp;subd=apaku&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>#2: Visualize your code in KDevelop</title>
  <link>http://liveblue.wordpress.com/2009/06/22/2-visualize-your-code-in-kdevelop/</link>
  <guid>http://liveblue.wordpress.com/?p=164</guid>
  <author>Sandro Andrade</author>
  <pubDate>Mon, 22 Jun 2009 10:16:35 +0200</pubDate>
  <description>
Hey folks, a quick update because something pushes me to my bed  
After a nice weekend we have a useful integration between KDevelop code editor and control flow graph plugin. You can easily get your graph updated when switching between functions in a class or between different opened classes. With such a mechanism, the [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=liveblue.wordpress.com&amp;blog=7344330&amp;post=164&amp;subd=liveblue&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>KDevelop4 UI: Areas, Working Sets, etc.</title>
  <link>http://zwabel.wordpress.com/2009/06/21/kdevelop4-ui-areas-working-sets-etc/</link>
  <guid>http://zwabel.wordpress.com/?p=154</guid>
  <author>zwabel</author>
  <pubDate>Sun, 21 Jun 2009 23:58:55 +0200</pubDate>
  <description>
General Progress
A lot is happening in KDevelop4 these days. Now it&amp;#8217;s nearly already 2 Months ago that we had our developer meeting in Ukraine. We had a lot of fun, although for me the trip started two days late. I didn&amp;#8217;t get my passport in time, damn. But once there, I got quite productive. Since [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=zwabel.wordpress.com&amp;blog=2107769&amp;post=154&amp;subd=zwabel&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>Visualize your code in KDevelop</title>
  <link>http://liveblue.wordpress.com/2009/06/17/visualize-your-code-in-kdevelop/</link>
  <guid>http://liveblue.wordpress.com/?p=146</guid>
  <author>Sandro Andrade</author>
  <pubDate>Thu, 18 Jun 2009 00:22:40 +0200</pubDate>
  <description>
Who of us hasn&amp;#8217;t ever got lost when doing maintenance and evolution activities in highly complex software with hundreds of thousands of source code lines ? So, this is the first update on my GSoC project about static code visualization (in contrast with dynamic visualization &amp;#8211; as in KCachegrind &amp;#8211; and evolution visualization &amp;#8211; for [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=liveblue.wordpress.com&amp;blog=7344330&amp;post=146&amp;subd=liveblue&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>Beta3 and Beta4</title>
  <link>http://apaku.wordpress.com/2009/06/02/beta3-and-beta4/</link>
  <guid>http://apaku.wordpress.com/?p=127</guid>
  <author>apaku</author>
  <pubDate>Tue, 02 Jun 2009 22:14:31 +0200</pubDate>
  <description>
Anybody who reads the dot will already know, but for those who don&amp;#8217;t (yes I mean you): KDevelop4 has released its third beta. We&amp;#8217;ve fixed tons of bugs, added a new launch framework, new C++ features and added a whole new way of switching the perspective from code to debug and back (KDE4.3 only).
However since [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=apaku.wordpress.com&amp;blog=1182522&amp;post=127&amp;subd=apaku&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>Progress in non-cpp KDevelop4 land</title>
  <link>http://milianw.de/blog/progress-in-non-cpp-kdevelop4-land</link>
  <guid isPermaLink="false">99 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Wed, 27 May 2009 21:09:28 +0200</pubDate>
  <description>
&lt;p&gt;Has been a time since I wrote the last update for PHP / webdevelopment related work in KDevelop4&amp;#8230;&lt;/p&gt;

&lt;h5&gt;XDebug&lt;/h5&gt;

&lt;p&gt;First of all, Niko (nsams) is working diligently on the general debugger framework for KDevelop4. Of course gdb is still the main focus so far yet he always has his XDebug plugin (which is currently unusable) in mind. So expect some great debugging features once he&amp;#8217;s done with the framework.&lt;/p&gt;

&lt;h5&gt;Remote Projects&lt;/h5&gt;

&lt;p&gt;Another thing I&amp;#8217;ve not yet written about is a bunch of commits I did just after the Hackaton: Remote Projects! Yes, finally you can work directly on the server with KDevelop. I still have to make sure that the user does not try to open a remote cmake project (or similar), because that is &lt;em&gt;of course&lt;/em&gt; not supported. Only the Generic Project Manager (basically a list of files in a dir) works. There&amp;#8217;s for sure some things to polish, yet I&amp;#8217;d like to see user feedback for that use-case at least.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is still some functionality missing in other areas, like creating a new remote project from a template etc.&lt;/p&gt;

&lt;h5&gt;Out-of-class declarations of member variables&lt;/h5&gt;

&lt;p&gt;The PHP plugin itself got support for some more code, like declarations of members variables outside the class context which was reported by one of our early adopters (&lt;em&gt;hint&lt;/em&gt; &lt;em&gt;hint&lt;/em&gt; - do the same! we need more wishes and bug reports!).&lt;/p&gt;

&lt;h5&gt;Improved DeclarationBuilder&lt;/h5&gt;

&lt;p&gt;Additionally I changed the logic of our DeclarationBuilder so it does not create a new variable declaration for each assigment expression. I think this makes refactoring, use-highlighting etc. in a PHP environment much better for many cases. Sadly it is not yet perfect since we still need to redeclare variables when their type changes. Fixing that would require potentially big changes to the DUChain and I&amp;#8217;m not sure when it will happen.&lt;/p&gt;

&lt;h5&gt;Error Reporting&lt;/h5&gt;

&lt;p&gt;Furthermore I&amp;#8217;ve added some more inline error reportings, namely for redeclaration of &lt;span&gt;&lt;code&gt;$this&lt;/code&gt;&lt;/span&gt; in a class context. This is also an area where &lt;strong&gt;you&lt;/strong&gt; might help us a lot: Send us PHP snippets which fail when executed but are not yet highlighted in the editor. I&amp;#8217;ll try to add them then. Just use the bugtracker on &lt;a href="http://bugs.kde.org"&gt;http://bugs.kde.org&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;Performance&lt;/h5&gt;

&lt;p&gt;Also David (dnolden / zwabel) of Cpp-KDev4 fame made some changes which resulted in a good performance win. Thanks!&lt;/p&gt;  </description>
</item>
<item>
  <title>KDevelop error display</title>
  <link>http://vladimir_prus.blogspot.com/2009/05/kdevelop-error-display-and-breadcrumbs.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-320232628064889202</guid>
  <author>Vladimir Prus</author>
  <pubDate>Wed, 20 May 2009 18:22:00 +0200</pubDate>
  <description>
For quite a while I wanted KDevelop to display compilation errors directly inside the editor, as opposed to separate window you have to click in. It works now, as shown below.
&lt;a href="http://4.bp.blogspot.com/_DUtp0m1tSPk/ShQuiXO4JzI/AAAAAAAAAFM/gz1hyKS18pI/s1600-h/inline_error.jpg"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 288px;" src="http://4.bp.blogspot.com/_DUtp0m1tSPk/ShQuiXO4JzI/AAAAAAAAAFM/gz1hyKS18pI/s400/inline_error.jpg" alt="" id="BLOGGER_PHOTO_ID_5337942626227726130" border="0" /&gt;&lt;/a&gt;

This was implemented by Ivan Ruchkin, a student at Moscow State University, who will be defending a term paper about various KDevelop-related work tomorrow. The patches will be posted to appropriate mailing lists right after that.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-320232628064889202?l=vladimir_prus.blogspot.com" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>new dependency for kdevelop/gdb</title>
  <link>http://apaku.wordpress.com/2009/05/08/new-dependency-for-kdevelopgdb/</link>
  <guid>http://apaku.wordpress.com/?p=125</guid>
  <author>apaku</author>
  <pubDate>Fri, 08 May 2009 22:23:00 +0200</pubDate>
  <description>
Apparently some people tap into this pitfall, so I&amp;#8217;ll kinda &amp;#8220;announce&amp;#8221; this here. KDevelop4 from trunk requires kdebase/workspace since this week. The reason is a much improved process-selection-widget for our gdb-plugin. This allows far better attach-to-process experience than the old widget. The new widget comes from a library thats so far used by ksysguard and [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=apaku.wordpress.com&amp;blog=1182522&amp;post=125&amp;subd=apaku&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>New Launch Framework Landed</title>
  <link>http://apaku.wordpress.com/2009/04/30/new-launch-framework-landed/</link>
  <guid>http://apaku.wordpress.com/?p=123</guid>
  <author>apaku</author>
  <pubDate>Thu, 30 Apr 2009 23:43:07 +0200</pubDate>
  <description>
Finally, after about 3 weeks of work I&amp;#8217;ve been able to merge back the new launch framework for KDevelop4.
The rework was needed because the existing gui and framework didn&amp;#8217;t allow for enough flexibility for more complex cases like remote-gdb debugging, or debugging webpages. Also it forced the user to store its configurations inside a project.
I&amp;#8217;m [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=apaku.wordpress.com&amp;blog=1182522&amp;post=123&amp;subd=apaku&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>KDevelop Hack Sprint 2009 - Day 2 and 3</title>
  <link>http://milianw.de/blog/kdevelop-hack-sprint-2009-day-2-and-3</link>
  <guid isPermaLink="false">98 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Thu, 23 Apr 2009 01:31:42 +0200</pubDate>
  <description>
&lt;p&gt;Ok, just a quick update on what we are doing / have done the last two days except drinking beer and eating quite a lot of food (though it never seems to be enough somehow&amp;#8230;.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apol was polishing CMake support, speeding up KDevelop startup time when you enabled the QtHelp plugin, making sure that Kross plugins get loaded properly and some other things&lt;/li&gt;
&lt;li&gt;Adymo started some refactoring of Sublime in an experimental branch (actually they had quite a long discussion right now about things in the UI which should be changed/fixed). Besides that he also fixed some little bugs in the includepath resolver for CMake&lt;/li&gt;
&lt;li&gt;Nsams is fixing PHP support and adding new features here and there. Esp. completion inside a foreach over a Iterator class works now!&lt;/li&gt;
&lt;li&gt;and as always ZWabel did fix quite a lot of bugs, most of them which only were discoverable in a few corner cases, very nice indeed.&lt;/li&gt;
&lt;li&gt;shaforo who sadly already left us again to attend university fixed the sorting in the Project view among other things&lt;/li&gt;
&lt;li&gt;With Apols help I managed to get started with a documentation plugin which (currently) integrates PHP.net. I plan to make it possible to use the downloadable PHP.net documentation as well to speed things up. Actually setting up a documentation plugin is &lt;em&gt;very&lt;/em&gt; easy! Maybe I&amp;#8217;ll take a look at writing a documentation plugin for Zend, Symfony, etc. pp. as well - should be fairly easy. Maybe I can come up with a generic documentation plugin which makes it possible to include any kind of &lt;span&gt;&lt;code&gt;.html&lt;/code&gt;&lt;/span&gt; documentation with some configurable mapping&amp;#8230; lets see! Or maybe I should take a look at writing Kross plugins (Apol could help me here as well) for that purpose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Except these changes we also discussed how to support dynamically typed languages like PHP, Ruby, Python and JavaScript better. One result of it that we now plan to fully support the dedicated map types of each language, with autocompletion and such. Of course that won&amp;#8217;t be possible for 100% of the use-cases, but we hope to support at least the most common ones (i.e. 90%). You can take a look at &lt;a href="http://www.kdevelop.org/mediawiki/index.php/SupportForDynamicMaps" title="http://www.kdevelop.org/mediawiki/index.php/SupportForDynamicMaps"&gt;http://www.kdevelop.org/mediawiki/index.php/SupportForDynamicMaps&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;Additionally Nsams, Apol and Zwabel took a look at the GDB plugin and started working on it a bit. It&amp;#8217;s still a work in progress though.&lt;/p&gt;

&lt;p&gt;My biggest change is that color highlighting support for dark color schemes now is in trunk. It automatically adapts to changes in the global KDE color scheme, yet you still have to manually change the Kate color scheme. Actually I intend to add an interface to Kate so we can use it&amp;#8217;s color schemes instead of the global KDE one - makes much more sense and would fix some bugs (i.e. fix from dark color scheme to a light one). Here&amp;#8217;s a screenshot of it (with the PHP.net documentation showing):&lt;/p&gt;

&lt;p&gt;
&lt;img src="http://milianw.de/files/kdevelop/dark_highlighting.png" alt="highlighting in kdevelop with dark color scheme" /&gt;
&lt;br /&gt;
&lt;small&gt;&lt;em&gt;dark color scheme and syntax highlighting in KDevelop 4&lt;/em&gt;&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;If you followed the planet kde you might have seen &lt;a href="http://ariya.blogspot.com/2009/04/on-hue-subdividision-for-mortals.html"&gt;some&lt;/a&gt; &lt;a href="http://ariya.blogspot.com/2009/04/still-about-color-wheel.html"&gt;blog&lt;/a&gt; posts about color reception and color generation by &lt;a href="http://ariya.blogspot.com/"&gt;Ariya Hidayat&lt;/a&gt;. I will take a look at it and implement it in KDevelop. Or I simply pick a given set of colors and use them - for 10 colors or so we need it doesn&amp;#8217;t make that much sense to let them be generated. Yet the article he linked to about &lt;a href="http://doc.trolltech.com/qq/qq26-adaptivecoloring.html"&gt;adaptive coloring for syntax highlighting&lt;/a&gt; will be helpful I think! Thanks!&lt;/p&gt;

&lt;p&gt;Yet it currently works quite well I&amp;#8217;ll first try to fix the colors in the Declaration tooltip, quickopen and codecompletion lists.&lt;/p&gt;

&lt;p&gt;So stay tuned for more KDevelop goodness throughout the next days.&lt;/p&gt;  </description>
</item>
<item>
  <title>KDevelop Hack Sprint 2009 - Day 1</title>
  <link>http://milianw.de/blog/kdevelop-hack-sprint-2009-day-1</link>
  <guid isPermaLink="false">97 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Mon, 20 Apr 2009 23:01:26 +0200</pubDate>
  <description>
&lt;p&gt;Ok, a short blog about the first day of our KDevelop Hack Sprint at Mykolayiv (see &lt;a href="http://milianw.de/blog/kdevelop-hack-sprint"&gt;my first blog post&lt;/a&gt;). First up, being in the Ukraine is a very interesting experience since it&amp;#8217;s totally different from any place I have ever been to. And thanks to the great hospitality of Alexander (adymo) we already had a city tour of Odessa and Mykolayiv.&lt;/p&gt;

&lt;p&gt;Tomorrow will be the first &lt;em&gt;real&lt;/em&gt; day of our hack sprint: Today we only hacked at our flat for a few hours. Before that we had the city tour through Mykolayiv. And tomorrow David Nolden (zwabel) and Nick Shaforostoff will arrive which will make the list complete.&lt;/p&gt;

&lt;p&gt;Today I personally worked on making KDevelop support dark color schemes better which is still a work in progress (nothing comitted so far). Actually for a real good experience I&amp;#8217;ll have to extend KTextEditor to make it&amp;#8217;s color configuration available for the parent application (i.e. KDevelop). Let&amp;#8217;s see when I get to that. Though I plan to push my patches to KDevplatform beforehand for an intermediate solution.&lt;/p&gt;

&lt;p&gt;Random other notes about Ukraine:
- I love the Vodka (esp. with its prices) here!
- breakfast at a cafe is pretty much a no-go here it seems
- street lights are luxury
- very many old building all across the city, looks pretty good. Though would look even better if all of them would be in a good shape&amp;#8230; Yet I still prefer it that way - I hate what was done to Berlin after the war, i.e. that they teared most of the old buildings apart instead of repairing them&amp;#8230;&lt;/p&gt;

&lt;p&gt;So, lets see what tomorrow brings, now I&amp;#8217;m back to some more hacking :)&lt;/p&gt;  </description>
</item>
<item>
  <title>KDevelop Hack Sprint</title>
  <link>http://milianw.de/blog/kdevelop-hack-sprint</link>
  <guid isPermaLink="false">95 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Thu, 02 Apr 2009 01:38:40 +0200</pubDate>
  <description>
&lt;p&gt;Huzza! The KDevelop Hack Sprint 09 is now official.&lt;/p&gt;

&lt;p&gt;Thanks to the huge engagement of &lt;a href="http://adymo.blogspot.com/"&gt;Alexander Dymo&lt;/a&gt; we will meet from the 19&lt;sup&gt;th&lt;/sup&gt; to 26&lt;sup&gt;th&lt;/sup&gt; April 2009. The meeting will take place at Alexander&amp;#8217;s university, the &lt;em&gt;national university of shipbuilding&lt;/em&gt; in &lt;del&gt;Odessa&lt;/del&gt; &lt;ins&gt;Mykolayiv&lt;/ins&gt;, Ukraine. Thanks to the people there responsible for making this sprint possible by providing us with the premises, internet, power etc.&lt;/p&gt;

&lt;p&gt;Since this is my very first Hack Sprint and considering that I only recently started contributing to KDE in general and KDevelop in particular I am &lt;em&gt;very&lt;/em&gt; excited. The topics I will plan to hack on include (all related to PHP language support plugin):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add auto completion after &lt;span&gt;&lt;code&gt;require(_once)&lt;/code&gt;&lt;/span&gt; and &lt;span&gt;&lt;code&gt;include(_once)&lt;/code&gt;&lt;/span&gt;, just like it works for &lt;span&gt;&lt;code&gt;#include&lt;/code&gt;&lt;/span&gt; in CPP&lt;/li&gt;
&lt;li&gt;add auto completion of PHP statements (think &lt;span&gt;&lt;code&gt;echo&lt;/code&gt;&lt;/span&gt;, &lt;span&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/span&gt;, &lt;span&gt;&lt;code&gt;require(_once&lt;/code&gt;&lt;/span&gt;, &lt;span&gt;&lt;code&gt;include(_once)&lt;/code&gt;&lt;/span&gt; etc. pp.)&lt;/li&gt;
&lt;li&gt;add auto completion for build-in PHP keywords&lt;/li&gt;
&lt;li&gt;fix auto completion of interfaces / classes after the keywords &lt;span&gt;&lt;code&gt;implements&lt;/code&gt;&lt;/span&gt; and &lt;span&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/span&gt; (working on that right now)&lt;/li&gt;
&lt;li&gt;fix KDevplatform and the Generic Plugin Manager to support remote projects, i.e. via &lt;span&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/span&gt; or &lt;span&gt;&lt;code&gt;ftp&lt;/code&gt;&lt;/span&gt; (or anything else supported by KIO)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I&amp;#8217;ll have a whole week of hacking time I hope to get all that done. And more. Since another great thing about the Sprint will be that I can finally meet Niko (nsams) in person. For those of you who don&amp;#8217;t know: He&amp;#8217;s the one who started the PHP language support plugin. Expect some additional points from &lt;a href="http://techbase.kde.org/Projects/Quanta/Feature_Plan_4"&gt;our roadmap&lt;/a&gt; getting implemented / fixed during that time!&lt;/p&gt;

&lt;p&gt;Furthermore it looks like Mr DUChain himself - &lt;a href="http://zwabel.wordpress.com/"&gt;David Nolden&lt;/a&gt; - will attend as well. I have some ideas regarding parts of the PHP plugin I want to refactor but need additional insight to the way the DUChain works. Let&amp;#8217;s see if David and I can work it out.&lt;/p&gt;

&lt;p&gt;And maybe I can even take a look at Quanta 4 itself&amp;#8230; Let&amp;#8217;s see!&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m very much looking forward to the Sprint and meeting some of the other developers! And much thanks again to Alexander for planning all this. Oh and also a &lt;strong&gt;very&lt;/strong&gt; great &lt;em&gt;Thank You&lt;/em&gt; goes to the &lt;a href="http://ev.kde.org/"&gt;KDE e.V.&lt;/a&gt; for sponsoring the event. I wouldn&amp;#8217;t have been able to attend otherwise!&lt;/p&gt;

&lt;p&gt;Keep an eye on the planet for more blog posts during the Hack Sprint, I&amp;#8217;ll try to write some daily coverage. Now lets see if I can get to sleep&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; The meeting actually takes place in Mykolayiv, 120km from Odessa :) Thank god that I will be picked up at the airport and don&amp;#8217;t have to find it myself&amp;#8230;&lt;/p&gt;  </description>
</item>
<item>
  <title>Really rapid C++ development with KDevelop4</title>
  <link>http://zwabel.wordpress.com/2009/03/13/really-rapid-c-development-with-kdevelop4/</link>
  <guid>http://zwabel.wordpress.com/?p=104</guid>
  <author>zwabel</author>
  <pubDate>Fri, 13 Mar 2009 21:52:54 +0100</pubDate>
  <description>
Code Assistants
When developing for a statically typed language like C++, there usually is quite a bit of redundancy during the development, especially when creating a completely new piece of code. A powerful IDE with deep code understandic theoretically could save a significant amount of the writing work. My goal with KDevelop4 is to allow the [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=zwabel.wordpress.com&amp;blog=2107769&amp;post=104&amp;subd=zwabel&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>Typedefs in Templates, and Code-Completion</title>
  <link>http://zwabel.wordpress.com/2009/03/06/typedefs-in-templates-and-code-completion/</link>
  <guid>http://zwabel.wordpress.com/?p=90</guid>
  <author>zwabel</author>
  <pubDate>Fri, 06 Mar 2009 15:28:36 +0100</pubDate>
  <description>
Sometimes you have to decide between being &amp;#8220;correct&amp;#8221;, and being user-friendly.
Also, sometimes you have to do one painful change with many regressions, to reach an ultimately better state.
I hope I had to do the last such step before the stable KDevelop release(Though you never know). I have changed the internal representation of the C++ DUChain, [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=zwabel.wordpress.com&amp;blog=2107769&amp;post=90&amp;subd=zwabel&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>Building KDevplatform, KDevelop and the PHP plugin from SVN</title>
  <link>http://milianw.de/blog/building-kdevplatform-kdevelop-and-the-php-plugin-from-svn</link>
  <guid isPermaLink="false">93 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Fri, 06 Mar 2009 00:21:47 +0100</pubDate>
  <description>
&lt;p&gt;In a follow up to my last post about &lt;a href="http://milianw.de/blog/php-support-for-kdevelop-4-and-eventually-quanta"&gt;the PHP plugin&lt;/a&gt; for KDevelop and Quanta I want to detail how I setup my build environment. Since I&amp;#8217;m only working on KDevelop I only want to compile that. For all other applications, I use the packages my distribution makes available. Below you this is possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I use Kubuntu and hence some commands like &lt;span&gt;&lt;code&gt;aptitude&lt;/code&gt;&lt;/span&gt; and the package names etc. will have to be adapted to your specific distribution. But the general idea should be the same and the packages should be called at least somewhat similar. You could always take a look at &lt;a href="http://techbase.kde.org/Getting_Started/Build/KDE4#Required_packages_from_your_distribution"&gt;the techbase article&lt;/a&gt; on compilation of KDE 4 to get a more general HowTo.&lt;/p&gt;

&lt;p&gt;It is generally a &lt;em&gt;very good&lt;/em&gt; idea to read some articles on the &lt;a href="http://techbase.kde.org"&gt;techbase&lt;/a&gt;. Especially in the Getting Started section.&lt;/p&gt;

&lt;h5&gt;getting the dependencies&lt;/h5&gt;

&lt;p&gt;First, you&amp;#8217;ll need to install some packages to satisfy dependencies &lt;em&gt;and&lt;/em&gt; to get a working compile chain (think cmake, gcc and stuff). The following command only lists very few packages but they have a huge list of dependencies which your package manager will take into account automatically. Don&amp;#8217;t be suprised by a possibly huge list of packages ;-) So some disk space will be required (though I doubt it&amp;#8217;s more than 250MB in total).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You&amp;#8217;ll need the KDE 4.2.x versions of the KDE libraries and development packages. When you use Kubuntu, you can &lt;a href="http://www.kubuntu.org/news/kde-4.2"&gt;follow this article&lt;/a&gt; to get up to date packages for the 8.10 release.&lt;/p&gt;

&lt;div&gt;&lt;pre&gt;&lt;ol&gt;&lt;li&gt;&lt;div&gt;&lt;span&gt;# I hope these are all, it's been a time since I did that the last time&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;span&gt;# please report if anything is missing&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;span&gt;aptitude&lt;/span&gt; &lt;span&gt;install&lt;/span&gt; kdebase-dev kdelibs5-dev kdebase-workspace-dev \&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;                         libqt4-dev build-essential subversion kdesdk-scripts&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;setting up your environment&lt;/h5&gt;

&lt;p&gt;Inspired by the techbase &lt;a href="http://techbase.kde.org/Getting_Started/Increased_Productivity_in_KDE4_with_Scripts"&gt;article on improved productivity&lt;/a&gt; in KDE4, particularly the bashrc listed there, I&amp;#8217;ve come up with the following way to configure my system:&lt;/p&gt;

&lt;p&gt;First visit &lt;a href="http://github.com/milianw/shell-helpers/tree/master"&gt;my shell helper git repo&lt;/a&gt; on GitHub and download the two files &lt;span&gt;&lt;code&gt;kde4_setup_build_environment.sh&lt;/code&gt;&lt;/span&gt; and &lt;span&gt;&lt;code&gt;bash_setup_kde4_programming&lt;/code&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;h6&gt;set the environment variables&lt;/h6&gt;

&lt;p&gt;Move the file &lt;span&gt;&lt;code&gt;kde4_setup_build_environment.sh&lt;/code&gt;&lt;/span&gt; to &lt;span&gt;&lt;code&gt;~/.kde/env&lt;/code&gt;&lt;/span&gt; and make it executable. You might want to adapt the paths for the variables &lt;span&gt;&lt;code&gt;KDE_BUILD&lt;/code&gt;&lt;/span&gt;, &lt;span&gt;&lt;code&gt;KDE_SRC&lt;/code&gt;&lt;/span&gt; and &lt;span&gt;&lt;code&gt;KDEDIR&lt;/code&gt;&lt;/span&gt; inside that file to your likings.&lt;/p&gt;

&lt;p&gt;This part is required to make sure that compiled programs will act just like normal programs installed globally (e.g. with your package manager) right from the start of your KDE session. I.e. KRunner works fine and custom plugins are found etc.&lt;/p&gt;

&lt;h6&gt;make your life easier with some bash magic&lt;/h6&gt;

&lt;p&gt;Now alter your &lt;span&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/span&gt; and to the bottom of that file add the following line:&lt;/p&gt;

&lt;div&gt;&lt;pre&gt;&lt;ol&gt;&lt;li&gt;&lt;div&gt;. ~&lt;span&gt;/&lt;/span&gt;.bash_setup_kde4_programming&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This assumes that you saved the afore mentioned &lt;span&gt;&lt;code&gt;bash_setup_kde4_programming&lt;/code&gt;&lt;/span&gt; file to &lt;span&gt;&lt;code&gt;~/.bash_setup_kde4_programming&lt;/code&gt;&lt;/span&gt;. You might have to change the path.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; That file also sources the above script to set the environment variables. I&amp;#8217;m not sure it&amp;#8217;s required, but it doesn&amp;#8217;t hurt. So make sure the path is correct there.&lt;/p&gt;

&lt;h5&gt;Now to the fun part&lt;/h5&gt;

&lt;p&gt;Once all that&amp;#8217;s done, &lt;strong&gt;you have to log out of your bash session to get the environments&lt;/strong&gt;. Maybe even logout of your KDE session to make it aware of the new paths as well.&lt;/p&gt;

&lt;h6&gt;checking out KDevplatform, KDevelop and the PHP plugin&lt;/h6&gt;

&lt;p&gt;Get the latest and greatest directly from SVN (see also &lt;a href="http://techbase.kde.org/Getting_Started/Sources/Using_Subversion_with_KDE"&gt;Using Subversion with KDE&lt;/a&gt; on techbase):&lt;/p&gt;

&lt;div&gt;&lt;pre&gt;&lt;ol&gt;&lt;li&gt;&lt;div&gt;cs &lt;span&gt;# cs is not a typo! see above&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;span&gt;svn&lt;/span&gt; &lt;span&gt;co&lt;/span&gt; &lt;span&gt;svn&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;anonsvn.kde.org&lt;span&gt;/&lt;/span&gt;home&lt;span&gt;/&lt;/span&gt;kde&lt;span&gt;/&lt;/span&gt;trunk&lt;span&gt;/&lt;/span&gt;KDE&lt;span&gt;/&lt;/span&gt;kdevplatform&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;span&gt;svn&lt;/span&gt; &lt;span&gt;co&lt;/span&gt; &lt;span&gt;svn&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;anonsvn.kde.org&lt;span&gt;/&lt;/span&gt;home&lt;span&gt;/&lt;/span&gt;kde&lt;span&gt;/&lt;/span&gt;trunk&lt;span&gt;/&lt;/span&gt;KDE&lt;span&gt;/&lt;/span&gt;kdevelop&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;span&gt;svn&lt;/span&gt; &lt;span&gt;co&lt;/span&gt; &lt;span&gt;svn&lt;/span&gt;:&lt;span&gt;//&lt;/span&gt;anonsvn.kde.org&lt;span&gt;/&lt;/span&gt;home&lt;span&gt;/&lt;/span&gt;kde&lt;span&gt;/&lt;/span&gt;trunk&lt;span&gt;/&lt;/span&gt;playground&lt;span&gt;/&lt;/span&gt;devtools&lt;span&gt;/&lt;/span&gt;kdevelop4-extra-plugins&lt;span&gt;/&lt;/span&gt;php&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h6&gt;compiling and installing&lt;/h6&gt;

&lt;p&gt;Now it&amp;#8217;s time to compile all that code you just checked out. Hopefully you got all &lt;em&gt;required&lt;/em&gt; dependencies. If you need all bells and whistles, you&amp;#8217;ll have to install some more packages I&amp;#8217;m sure. If you run the code below, take a good look at the output of the &lt;span&gt;&lt;code&gt;cmakekde&lt;/code&gt;&lt;/span&gt; command (especially at the beginning). It lists not-found dependencies.&lt;/p&gt;

&lt;p&gt;Note: &lt;span&gt;&lt;code&gt;cmakekde&lt;/code&gt;&lt;/span&gt; is supposed to be run from inside your source folder (e.g. &lt;span&gt;&lt;code&gt;cs $FOLDER; cmakekde&lt;/code&gt;&lt;/span&gt;).&lt;/p&gt;

&lt;div&gt;&lt;pre&gt;&lt;ol&gt;&lt;li&gt;&lt;div&gt;cs kdevplatform&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;cmakekde&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;cs kdevelop&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;cmakekde&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;cs php&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;cmakekdke&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;kbuildsycoca4 &lt;span&gt;# make sure new plugins etc. are found&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty easy, hum? Let&amp;#8217;s hope everything worked fine :)&lt;/p&gt;

&lt;h6&gt;staying up to date&lt;/h6&gt;

&lt;p&gt;That above command is only required &lt;em&gt;once&lt;/em&gt;. Everytime after that, you can simply do the following which will make sure you are running the latest and greatest:&lt;/p&gt;

&lt;div&gt;&lt;pre&gt;&lt;ol&gt;&lt;li&gt;&lt;div&gt;cs kdevplatform&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;span&gt;svn&lt;/span&gt; up &lt;span&gt;&amp;&amp;&lt;/span&gt; &lt;span&gt;make&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;cs kdevelop&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;span&gt;svn&lt;/span&gt; up &lt;span&gt;&amp;&amp;&lt;/span&gt; &lt;span&gt;make&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;cs php&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;div&gt;&lt;span&gt;svn&lt;/span&gt; up &lt;span&gt;&amp;&amp;&lt;/span&gt; &lt;span&gt;make&lt;/span&gt; &lt;span&gt;install&lt;/span&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5&gt;The End&lt;/h5&gt;

&lt;p&gt;Hope I have not forgotten anything and that this (rather lengthy&amp;#8230;) HowTo is of some help to a few of you out there. Looking forward to feature requests, bug reports etc.&lt;/p&gt;  </description>
</item>
<item>
  <title>PHP support for KDevelop 4 (and eventually Quanta+)</title>
  <link>http://milianw.de/blog/php-support-for-kdevelop-4-and-eventually-quanta</link>
  <guid isPermaLink="false">92 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Mon, 02 Mar 2009 23:28:13 +0100</pubDate>
  <description>
&lt;p&gt;Hello Planet KDE!&lt;/p&gt;

&lt;p&gt;I want to give you a little insight on the current state of PHP support in KDevelop4:&lt;/p&gt;

&lt;p&gt;Me and Nikolaus Sams (nsams) are working diligently on a &lt;a href="http://websvn.kde.org/trunk/playground/devtools/kdevelop4-extra-plugins/php/"&gt;plugin for PHP support&lt;/a&gt; in playground. It&amp;#8217;s somewhat stable, i.e. we fix any crashes we stumble upon, but I would call it Alpha state at most. It may eat your babies so to speak. Yet I&amp;#8217;m happy to say that at least one user is already using it for production (hi leinir ;-) ).&lt;/p&gt;

&lt;h5&gt;implemented PHP support&lt;/h5&gt;

&lt;p&gt;Well, here&amp;#8217;s a (not complete) list of features that are already working. Though I have to warn you: no screenshots included ;-) It&amp;#8217;s actually all very similar to the C++ screenies you can see on the web.&lt;/p&gt;

&lt;h6&gt;sematic highlighting&lt;/h6&gt;

&lt;p&gt;Let&amp;#8217;s start with a feature that only very recently was added for PHP - semantic highlighting. Niko moved some language independent parts of the C++ plugin from KDevelop to KDevplatform and now PHP has the same code highlighting features as C++.&lt;/p&gt;

&lt;p&gt;I personally love this feature since it makes it even easier to grasp code &lt;em&gt;and&lt;/em&gt; it makes the code highlighting more consistent since there is no visual difference between PHP built-in functions/constants and your own.&lt;/p&gt;

&lt;h6&gt;code completion&lt;/h6&gt;

&lt;p&gt;Arguably one of the most useful features the DUChain enables us to write is code completion. There&amp;#8217;s already full support for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP built-in functions, classes, constants, superglobals&lt;/li&gt;
&lt;li&gt;user-defined functions, classes, constants, superglobals, variables, etc.&lt;/li&gt;
&lt;li&gt;proper code completion for objects which respects access modifiers (private, public, protected) and differentiates between static/non-static members and methods&lt;/li&gt;
&lt;li&gt;code completion for overridable and implementable functions inside classes&lt;/li&gt;
&lt;li&gt;hints in the argument list of function- and method class&lt;/li&gt;
&lt;li&gt;sane code completion after keywords such as &amp;#8220;extends, implements, catch(), new, throw&amp;#8221; and some more I think&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;#8217;s still some bugs to fix and a few features to implement. But I can easily say that even the current state of code completion makes one wonder how he could use Quanta (from KDE3 times) for such a long time! It&amp;#8217;s simply &lt;em&gt;nothing&lt;/em&gt; compared to this!&lt;/p&gt;

&lt;p&gt;The next feature I hope to add is support for type hinting in function calls. I.e. only show arrays where arrays are requested and the same for objects of a given type. Also no PHP keywords are currently completed &lt;em&gt;at all&lt;/em&gt;&amp;#8230;&lt;/p&gt;

&lt;h6&gt;other DUChain/UseBuilder stuff&lt;/h6&gt;

&lt;p&gt;Thanks to the DUChain you already get lots of information about declarations, such as uses (which files, which lines etc.). Also very neat is the hover popup you might now from C++ which among others shows you phpdoc comments inside your browser. I also plan to integrate the php.net documentation into KDevelop, similar to &lt;a href="http://www.proli.net/2009/02/28/kdevelop4s-documentation-integration/"&gt;what is already possible for QtHelp&lt;/a&gt;.&lt;/p&gt;

&lt;h6&gt;inline validation / syntax checking / linting&lt;/h6&gt;

&lt;p&gt;Another feature which saves lots of time is on-the-fly syntax checking: You won&amp;#8217;t have to fire up your web-app inside a browser just to be greated by that pesty &amp;#8220;syntax error, unexpected &amp;#8216;CHAR&amp;#8217; in FILE on line XYZ&amp;#8221; message&amp;#8230; No! Instead you will see a nice reddish zig-zag line where you made the error and can fix it &lt;em&gt;before&lt;/em&gt; heading off to the browser.&lt;/p&gt;

&lt;p&gt;But we don&amp;#8217;t only do basic syntax checking. We do more than that, thanks again to the power of the (holy?) DUChain. You can spot undeclared variables, function/method/class/constant redeclarations and more. Actually I hope that one day we spot most of the notices, warnings and errors PHP could emit.&lt;/p&gt;

&lt;h6&gt;tests&lt;/h6&gt;

&lt;p&gt;We already have a multitude of regression tests which will make sure that we don&amp;#8217;t mess up any existing stuff. Lets hope for even more of them :) I love test-driven development.&lt;/p&gt;

&lt;h5&gt;The End&lt;/h5&gt;

&lt;p&gt;Well, thats pretty much it for the moment. You can have a look at what we are up to at &lt;a href="http://techbase.kde.org/Projects/Quanta/Feature_Plan_4"&gt;the Quanta Feature plan&lt;/a&gt; on techbase.&lt;/p&gt;

&lt;p&gt;If you are a PHP developer and can write C++ with Qt, why not get in touch with us? You can find us both on the KDevelop mailinglist and at least me and leinir are often found in #kdevelop on freenode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let me finish with a quick introduction of myself:&lt;/p&gt;

&lt;p&gt;My name is Milian Wolff, I study Physics at the FU Berlin (just finished the 3rd semester). I started learning programming when I was around 14 with PHP. Over the years I became very good in it and the other webdevelopment techniques like Css, JavaScript etc. Recently I started to fullfill my biggest geek dream by learning C++/Qt/KDE and starting to contribute to the KDE project.&lt;/p&gt;

&lt;p&gt;Some of you might now my from the LinuxTag in Berlin where I could be found at the &lt;a href="http://kubuntu-de.org"&gt;Kubuntu-De.org&lt;/a&gt; community booth. At least with some of you I had a beer (well, I doubt it was only &lt;em&gt;one&lt;/em&gt;). I hope to repeat this tradition in 2009. Every once in a while I can also be spotted at &lt;a href="http://ubuntu-berlin.de"&gt;ubuntu-berlin&lt;/a&gt; events.&lt;/p&gt;  </description>
</item>
<item>
  <title>KDevelop4’s Documentation Integration</title>
  <link>http://www.proli.net/2009/02/28/kdevelop4s-documentation-integration/</link>
  <guid>http://www.proli.net/?p=47</guid>
  <author>apol</author>
  <pubDate>Sat, 28 Feb 2009 16:59:25 +0100</pubDate>
  <description>
I&amp;#8217;m back to you today to show something that we have been baking lately for KDevelop. It is its new documentation integration.
With KDevelop 4 we have been focusing on putting together the information that the user will be willing to read every moment. Until now, while browsing the code, we were only showing the information [...]  </description>
</item>
<item>
  <title>KDevelop4: Creating a Qt slot, the cool way</title>
  <link>http://zwabel.wordpress.com/2009/02/13/creating-a-qt-slot-the-cool-way/</link>
  <guid>http://zwabel.wordpress.com/?p=81</guid>
  <author>zwabel</author>
  <pubDate>Fri, 13 Feb 2009 23:52:21 +0100</pubDate>
  <description>
In an earlier blog-post I&amp;#8217;ve already written about automatic signal/slot matching and completion(See this). The code-completion box shows you the appropriate connectable signals and slots, and also shows exactly what signals match what slots. Now what if you have a signal, and you know want to connect to it, but you don&amp;#8217;t have a matching [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=zwabel.wordpress.com&amp;blog=2107769&amp;post=81&amp;subd=zwabel&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>KDevelop4 Beta1 Kubuntu Packages Problems</title>
  <link>http://apaku.wordpress.com/2009/02/06/kdevelop4-beta1-kubuntu-packages-problems/</link>
  <guid>http://apaku.wordpress.com/?p=111</guid>
  <author>apaku</author>
  <pubDate>Fri, 06 Feb 2009 22:01:29 +0100</pubDate>
  <description>
Update: Packagers seem to have fixed the problem, updates should be available soon. Thanks for the quick fix.
Hate to do this, but there&amp;#8217;s been about 6 or 7 people now in #kdevelop and I&amp;#8217;m not using kubuntu hence can&amp;#8217;t test this myself.
To make a long story short: The Kubuntu packages of KDevelop4 Beta1 are (as [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=apaku.wordpress.com&amp;blog=1182522&amp;post=111&amp;subd=apaku&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>KDevelop4: Automatic include-directives and forward-declarations</title>
  <link>http://zwabel.wordpress.com/2009/02/04/automatic-include-directives-and-forward-declarations/</link>
  <guid>http://zwabel.wordpress.com/?p=64</guid>
  <author>zwabel</author>
  <pubDate>Wed, 04 Feb 2009 02:09:21 +0100</pubDate>
  <description>
Missing Include Completion
C++ is a great and powerful programming-language. Yet it has the downside against some other languages, that you always have to deal with include-directives or forward-declarations before you can use a class.
This is a factor that often motivates me not to create too many different source-files, although design-wise that would make sense. Wouldn&amp;#8217;t [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=zwabel.wordpress.com&amp;blog=2107769&amp;post=64&amp;subd=zwabel&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>KDevelop4 updates</title>
  <link>http://apaku.wordpress.com/2009/01/15/kdevelop4-updates/</link>
  <guid>http://apaku.wordpress.com/?p=106</guid>
  <author>apaku</author>
  <pubDate>Thu, 15 Jan 2009 23:56:16 +0100</pubDate>
  <description>
C++ support in KDev4 really rocks, if kdevelop doesn&amp;#8217;t crash. Unfortunately it did so about 6 or 8 times in the last hour, luckily most of the time it was the second instance in which I tested my changes   The main instance was only crashing when I removed the .kdevduchain from under it, [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=apaku.wordpress.com&amp;blog=1182522&amp;post=106&amp;subd=apaku&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>C++ IDE Evolution: From Syntax Highlighting to Semantic Highlighting</title>
  <link>http://zwabel.wordpress.com/2009/01/08/c-ide-evolution-from-syntax-highlighting-to-semantic-highlighting/</link>
  <guid>http://zwabel.wordpress.com/?p=53</guid>
  <author>zwabel</author>
  <pubDate>Thu, 08 Jan 2009 04:19:05 +0100</pubDate>
  <description>
Most of us developers are so acccustomed to syntax highlighting, that we couldn't live without it. Syntax highlighting helps us keeping an overview or finding the place we're searching for. However it can not help us actually understanding the code. That's where Semantic Highlighting comes into play.&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host=zwabel.wordpress.com&amp;blog=2107769&amp;post=53&amp;subd=zwabel&amp;ref=&amp;feed=1" /&gt;  </description>
</item>
<item>
  <title>Guademy and GSoC</title>
  <link>http://www.proli.net/2008/04/28/guademy-and-gsoc/</link>
  <guid>http://www.proli.net/2008/04/28/guademy-and-gsoc/</guid>
  <author>apol</author>
  <pubDate>Mon, 28 Apr 2008 09:51:22 +0200</pubDate>
  <description>
Yes, this year you will have to put up with me with another Google Summer of Code project (well, mainly Matt Rogers, who is mentoring me again  ). This year I&amp;#8217;ll try to get KDevelop (KDevPlatform) to be able to use plugins written on different languages through Kross. Great!  
On the other side, [...]  </description>
</item>
<item>
  <title>KDevelop hackaton</title>
  <link>http://www.proli.net/2008/04/21/kdevelop-hackaton/</link>
  <guid>http://www.proli.net/2008/04/21/kdevelop-hackaton/</guid>
  <author>apol</author>
  <pubDate>Mon, 21 Apr 2008 13:40:12 +0200</pubDate>
  <description>
I am back from Munich, I am at the university now actually :(.
It was a great week though, lots of hacking, knowing people and community building. It is always nice to know the people which have been sharing with you bugs and features :). It was kind of sad leaving the place but well, we [...]  </description>
</item>
<item>
  <title>KDevelop Developer Meeting - Day[0]</title>
  <link>http://www.proli.net/2008/04/12/kdevelop-developer-meeting-day0/</link>
  <guid>http://www.proli.net/2008/04/12/kdevelop-developer-meeting-day0/</guid>
  <author>apol</author>
  <pubDate>Sat, 12 Apr 2008 17:39:16 +0200</pubDate>
  <description>
So today the KDevelop hackaton started. Yesterday I spent all the day just to go to Munich, where the hackaton is happening.
It was an usual trip: Police trying to get you naked when checking if you have no weapons, train delays (yeah in Germany, I thought that this didn&amp;#8217;t happen here  and some misunderstandings [...]  </description>
</item>
<item>
  <title>Debugger stories: pending breakpoints</title>
  <link>http://vladimir_prus.blogspot.com/2007/12/debugger-stories-pending-breakpoints.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-4257384193346886291</guid>
  <author>Vladimir Prus</author>
  <pubDate>Fri, 21 Dec 2007 19:47:00 +0100</pubDate>
  <description>
KDevelop 3.5 has a subtle bug. Sometimes, when you step over a function call, you don't stop on the next line. Instead, the application is resumed until it hits a breakpoint, or exits. This bug, in fact, is consequence of how breakpoints in shared libraries are implemented.
&lt;p&gt;
Suppose you've just started a debugger, and try to set a breakpoint on a function in a shared library. The library itself might not be loaded yet, in which case GDB cannot find the address of the symbol to set the low-level breakpoint. To handle this case, starting with version 6.1, GDB supports &lt;span&gt;pending breakpoints&lt;/span&gt;.  Such breakpoints don't correspond to any address in program, they only keep the specified breakpoint location as string. Whenever a new shared library is loaded, GDB tries to re-parse breakpoint location again, and if that succeeds, creates an ordinary breakpoint.
&lt;p&gt;
Now, this does not work when using the MI interface, for a couple of reasons:
&lt;ul&gt;&lt;li&gt;When a pending breakpoint is resolved, it is deleted, and new one is created. And GDB fails to inform MI frontend about this.
&lt;/li&gt;&lt;li&gt;It's actually not possible to create pending breakpoint using MI at all.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Because of these issues (and a bit of historic reasons) KDevelop 3.5 simulates pending breakpoints. GDB is asked to stop whenever a shared library is loaded, and when that happens, KDevelop tries to reinsert breakpoints. This works pretty well, except for the bug I mention in the beginning. Suppose you're stepping over a function call (this uses the "next" command on GDB level). The function opens some shared library, and which point GDB stops and KDevelop tries to reinsert breakpoints. After that KDevelop would like to continue the "next" operation, but it's already aborted by GDB. All we can do is continue the program.
&lt;p&gt;
But it's not longer the case today. As I wrote &lt;a href="http://vladimir_prus.blogspot.com/2007/11/breakpoints-in-constructors.html"&gt; earlier&lt;/a&gt; GDB was recently modified so that a breakpoint can correspond to several addresses, such as of template instantiations. A breakpoint is re-evaluated each time a shared library is loaded or unloaded, and locations are added to breakpoint and removed as appropriate, but it remains the same breakpoint. The nice side effect is that pending breakpoints are now just breakpoints with zero locations, that are reevaluated just like other breakpoints, and don't ever change their number.
&lt;p&gt;
In addition to that, I wrote patches to add pending breakpoint support to MI -- which mainly involved getting rid of two parallel breakpoint-setting code paths -- one for MI and one for CLI. Thanks to review of Joel Brobecker and Daniel Jacobowitz, those patches went in GDB CVS eariler this month. KDevelop 3.5 SVN was modified to automatically detect and use this GDB feature. So, if you're willing to build CVS HEAD of gdb and KDevelop from KDE 3.5 branch, you can finally have breakpoints in shared library just working.
&lt;p&gt;
This was probably my last KDevelop 3.5 commit. KDevelop 4 is ahead.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-4257384193346886291?l=vladimir_prus.blogspot.com" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Debugger Stories: Stack widget</title>
  <link>http://vladimir_prus.blogspot.com/2007/02/debugger-stories-stack-widget.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-2173552291981966095</guid>
  <author>Vladimir Prus</author>
  <pubDate>Wed, 31 Jan 2007 22:28:00 +0100</pubDate>
  <description>
In KDevelop 3.4, the stack widget was not changed much. I can remember just two changes­—one that is apparent and one that is subtle.
&lt;p&gt;
The apparent change is that we actually parse gdb output, and show it it a readable way, while in KDevelop 3.3 the stack frame formatting was entirely at mercy of gdb's "backtrace" command.
&lt;p&gt;
&lt;a href="http://4.bp.blogspot.com/_DUtp0m1tSPk/RcERPzkh9iI/AAAAAAAAAAc/Lct-6iWkZEU/s1600-h/stack.png"&gt;&lt;img style="margin: 0pt 10px 10px 0pt; float: left; cursor: pointer;" src="http://4.bp.blogspot.com/_DUtp0m1tSPk/RcERPzkh9iI/AAAAAAAAAAc/Lct-6iWkZEU/s400/stack.png" alt="" id="BLOGGER_PHOTO_ID_5026317622361323042" border="0" /&gt;&lt;/a&gt;
&lt;p&gt;
The subtle change is at the bottom of the screenshot—that "(click to get more frame)" thing. When a program stops, KDevelop fetches very few frames from gdb. If you click on that last item, then another chunk of frames will be fetched.
&lt;p&gt;
This behaviour is needed for two reasons. First, if your program is stuck in infinite recursion, and you try to interrupt it from KDevelop, in KDevelop 3.3 you're out of luck. As soon as the program is interrupted, KDevelop asks gdb for the list of all frames. Since your program is in infinite recursion, the number of frames is very large, and gdb is not very speedy stack-walker. So, you get to wait 5 mins for the stack to be shown. With incremental display, in a few clicks you'll see what function went astray.
&lt;p&gt;
The second reason is embarassing. Even without infinite recursion, getting the list of frames from gdb takes a lot of time. Something like half-a-second for getting 30 frames is not unheard of. Ideally, we'd fix gdb, but since we need incremental fetch anyway, fetching sufficiently small number of frames initially greatly improves responsiveness.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-2173552291981966095?l=vladimir_prus.blogspot.com" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Debugger stories: Watchpoints</title>
  <link>http://vladimir_prus.blogspot.com/2006/05/debugger-stories-watchpoints.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-114906807929380237</guid>
  <author>Vladimir Prus</author>
  <pubDate>Wed, 31 May 2006 11:12:00 +0200</pubDate>
  <description>
One of my faviourite debugger changes in KDevelop 3.4 is proper watchpoint handling. Before explaining it, some introduction is due.
&lt;p&gt;
Say you're debugging and see that the 'foo' field of 'pointer_to_some_data' is completely bogus. You are sure that it was valid some time ago, like when its containing object was constructed, so the question is where the corruption happened. That's exactly what watchpoints are for. You set breakpoint at a code where 'foo' is known to be valid, and then ask the debugger to stop whenever the value of 'foo' changes. The debugger in turn writes the address of 'foo' to a special processor register, and processor will call back the operating system, and then debugger, when 'foo' changes.
&lt;p&gt;
Except that GDB does not work this way by default. If you say:
&lt;blockquote&gt;&lt;code&gt;&lt;pre&gt;
watch pointer_to_some_data-&gt;foo
&lt;/pre&gt;&lt;/code&gt;&lt;/blockquote&gt;
there are two interpretations. First is to stop when memory location referred to by &lt;code&gt;pointer_to_some_data-&gt;foo&lt;/code&gt; is modified. Second is to stop when the value of the &lt;span&gt;expression&lt;/span&gt; &lt;code&gt;pointer_to_some_data-&gt;foo&lt;/code&gt; changes, which can happen also if &lt;code&gt;pointer_to_some_data&lt;/code&gt; changes. Obviously, when debugging memory corruption, you care about memory address, and &lt;code&gt;pointer_to_some_data&lt;/code&gt; is just a way to specify the memory address. Alas, by default GDB uses the second interpretation, so to set watchpoint on address you should use:
&lt;blockquote&gt;&lt;code&gt;&lt;pre&gt;
print &amp;(pointer_to_some_data-&gt;foo)
watch *$
&lt;/pre&gt;&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;
But the problem is not just that you'll get false hits when &lt;code&gt;pointer_to_some_data&lt;/code&gt; changes. The thing is that if that variable is a local one, or a function parameter, then GDB will immediately &lt;span&gt;remove&lt;/span&gt; watchpoint when you exit the containing function. So, for KDevelop user it will be like that: you pick a local variable in a variables widget, you expand it, right-click on some member, select "Toggle watchpoint", and continue. The watchpoint you've just added immediately goes away.
&lt;p&gt;
KDevelop 3.4 solves this problem in a radical way. All watchpoints are address watchpoints. For any expression you enter, address is computed and watchpoint is set on address. Expression without address (rvalue) can't be watched and you'll get an error message if adding watchpoints for rvalue. Additionally, when the application exits, all watchpoints are disabled, because data addresses can well be different on the next run. When user decides to enable a watchpoint, the address of expression is evaluated again, and a new watchpoints is set to that address.
&lt;p&gt;
Hopefully this will make watchpoints more usable for the ordinary programmer.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-114906807929380237?l=vladimir_prus.blogspot.com" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Introducing MI branch</title>
  <link>http://vladimir_prus.blogspot.com/2006/05/introducing-mi-branch.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-114655429246885688</guid>
  <author>Vladimir Prus</author>
  <pubDate>Tue, 02 May 2006 09:17:00 +0200</pubDate>
  <description>
For recent months, I was working on an internal reorganization of KDevelop debugger, informally known as "MI branch". Now that it mostly works, it's time to describe the goals and results. 
&lt;p&gt;
The original goal was to use a different interface with GDB, called "MI", that's specifically meant for frontends. In MI mode, gdb output can be easily parsed into DOM-like structure, and examined in a nice C++ way, something like:
&lt;blockquote&gt;&lt;code&gt;&lt;pre&gt;
(*last_stop_result)["value"]["old"].literal()
&lt;/pre&gt;&lt;/code&gt;&lt;/blockquote&gt;
Before, KDevelop was parsing GDB output intended for humans, and could in some cases misinterpret it. Like thinking that application is running, when it's actually stopped. This unreliability was the primary reason for switching to MI.
&lt;p&gt;
But MI is not a silver bullet. Both John Birch (original author of debugger part), and I had reservation about maturity of MI, which proved true eventually. I'll talk about this later, but basically, using MI does not automatically make debugger better, or faster, or anything, contrary to what many think. However, since using different protocol is a big code change already, I've sneaked in a number of architectural and GUI changes, hopefully for better.
&lt;p&gt;
So in the end MI branch had two goals:
&lt;ol&gt;
&lt;li&gt;Fix all glitches. Do you know that in some cases KDevelop 3.3 shows only half of local variables? Or that setting watchpoint in a natural way is rarely what you want? Or that if a program is stuck in infinite recursion, KDevelop will take minutes to show the stack? Each issue is not very significant in itself, but together they make user experience not confortable.
&lt;li&gt;Cleanup internal architecture. Original architecture was a bit too centralized and adding new features required a lot of work. And since many cool features come to mind, it's better be fixed quick.
&lt;/ol&gt;
&lt;p&gt;
The "MI branch" itself is already merged to KDevelop 3.4 branch. In future posts I'll describe all changes the debugger has compared to 3.3 release. Stay tuned.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-114655429246885688?l=vladimir_prus.blogspot.com" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Non-constant size</title>
  <link>http://vladimir_prus.blogspot.com/2006/04/non-constant-size.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-114613323460364990</guid>
  <author>Vladimir Prus</author>
  <pubDate>Thu, 27 Apr 2006 11:48:00 +0200</pubDate>
  <description>
Quite some time ago, when I was learning &lt;a href="http://www.sgi.com/tech/stl/"&gt;STL&lt;/a&gt;, all information sources stressed the importance of learning complexity guarantees that methods of various containters make. One specific subtle thing is that the &lt;code&gt;std::list&lt;&gt;::size()&lt;/code&gt; method runs in &lt;span&gt;linear&lt;/span&gt; time, not in constant time. It was explicitly designed that way for a reason,  described in &lt;a href="http://www.sgi.com/tech/stl/FAQ.html"&gt;STL faq&lt;/a&gt;, but what matters to an ordinary programmer is that testing lists for emptyness should be done with the &lt;code&gt;empty&lt;/code&gt; method, not by comparing size to zero, otherwise it's easy to kill performance.
&lt;p&gt;
Today, I run into another case where non-const-time &lt;code&gt;size()&lt;/code&gt; matters. I was testing KDevelop on some testcase, and noticed that getting list of stack frames from gdb takes a lot of time. I've added some profiling code, and found that a one command takes 200ms to execute. Adding profiling code to gdb revealed that gdb itself takes some 70ms. Of course, that's not ideal, but even larger fraction of time was apparently spend in KDevelop, ehm, parsing the response.
&lt;p&gt;
So I've quickly put up a testcase that repeatedly parses a specific response, and ran it under &lt;a href="http://kcachegrind.sourceforge.net/cgi-bin/show.cgi"&gt;callgrind&lt;/a&gt;.  Ten minutes later I've got a profile with &lt;code&gt;strlen&lt;/code&gt; on  top. It turned out that the parsing code was using &lt;code&gt;QCString&lt;/code&gt; and calling it's &lt;code&gt;length&lt;/code&gt; method at least one for each token, and for certain tokens -- once for each character. The &lt;code&gt;length&lt;/code&gt;, in turn, just calls &lt;code&gt;strlen&lt;/code&gt;. Since the input string was 20K in size, most of runtime was spend measuring the size of that string. 
&lt;p&gt;Another unexpected behaviour was found in the &lt;code&gt;QCString::mid&lt;/code&gt; function. Internally, it also calls &lt;code&gt;length&lt;/code&gt;, and &lt;code&gt;mid&lt;/code&gt; was called once for each token.

&lt;p&gt;After uses of non-const-time methods were reduced to minimum, the parsing time my test case decreased 40x. No so bad, I think. The only problem is that time spend in gdb is still to high for a GUI, and that won't be that easy to fix.&lt;/span&gt;&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-114613323460364990?l=vladimir_prus.blogspot.com" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Printf debugging 2006</title>
  <link>http://vladimir_prus.blogspot.com/2006/04/printf-debugging-2006.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-114431922218203677</guid>
  <author>Vladimir Prus</author>
  <pubDate>Thu, 06 Apr 2006 11:57:00 +0200</pubDate>
  <description>
One of the oldest methods of debugging is "printf debugging" -- putting various print statements in the code and then staring at the output. That's useful not only if you can't use a debugger. If the program does not crash, but produces wrong results after long computation, it's hard to figure where exactly the problem lies. In that case, printing intermediate data can be a very efficient method.

&lt;p&gt;
The only problem is that after adding print statements the program must be recompiled, and after debugging print statements must be removed. But it's possible to make gdb into printing machine using so called "breakpoint commands". Each breakpoint can have a list of commands that will be executed when breakpoint is hit. The commands can include printing and "continue". Here's a simplified example of gdb script I've used recently:

&lt;blockquote&gt;&lt;code&gt;&lt;pre&gt;
break main.cpp:1353
commands
   print ('lvk::nm_model::NM'*)this
   printf "Entering 'run', proc %d\n", $-&gt;processor_number
   continue
end
run
&lt;/pre&gt;&lt;/code&gt;&lt;/blockquote&gt;

&lt;p&gt;
After putting this to a file "script", gdb can be run as:
&lt;blockquote&gt;&lt;code&gt;
gdb -batch -x script &lt;span&gt;name_of_program&lt;/span&gt; &gt; log
&lt;/code&gt;&lt;/blockquote&gt;
producing logs of variable values as certain points of the program.

&lt;p&gt;Starting with version 3.3.0, similar functionality is available in &lt;a href="http://kdevelop.org"&gt;KDevelop&lt;/a&gt;. Just click on the "Tracing" column in breakpoints window, select variables to print and click OK.

&lt;p align="center"&gt;
&lt;img src="http://zigzag.cs.msu.su/~ghost/images/tracing_dialog_shadow.png"&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;More screenshots &lt;a href="http://kdevelop.org/graphics/screenshots/3.3/tracing2.png"&gt;here&lt;/a&gt; and &lt;a href="http://kdevelop.org/graphics/screenshots/3.3/tracing_output.png"&gt;here&lt;/a&gt;.

This is a beginning, future KDevelop version will allow to specify custom commands for breakpoints.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-114431922218203677?l=vladimir_prus.blogspot.com" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>1 + 2</title>
  <link>http://vladimir_prus.blogspot.com/2005/07/1-2.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-112195666121491074</guid>
  <author>Vladimir Prus</author>
  <pubDate>Thu, 21 Jul 2005 16:18:00 +0200</pubDate>
  <description>
I've just got the following:
&lt;blockquote&gt;&lt;code&gt;&lt;pre&gt;
(gdb) target remote :1234
Remote debugging using :1234
main () at main.cpp:5
5       {
(gdb) p add(1, 2)
$1 = 3
&lt;/pre&gt;&lt;/code&gt;&lt;/blockquote&gt;

As you see, using the gdb debugger I've evaluated expression &lt;code&gt;add(1,2)&lt;/code&gt;, where function &lt;code&gt;add&lt;/code&gt; presumably adds two numbers, and got the right result. What's interesting in this?

There are two interesting things:
&lt;ol&gt;
&lt;li&gt; It's gdb port to a new target.
&lt;li&gt; The remote side is not a hardware board -- it's our simulator, which was taught to talk using gdb's remote protocol
&lt;/ol&gt;

However simple the example seems, it involves several steps:
&lt;ol&gt;
&lt;li&gt; First of all, gdb must load the symbol tables. Othewise, it won't know that &lt;code&gt;add&lt;/code&gt; is a function. That did not work out of box, for example gdb assumed that program can't start at address 0.
&lt;li&gt; After connecting to the target, gdb asks about the value of program counter. This requires support for appropriate protocol command. Also, our simulator took shortcuts and did not even maintain the program counter!
&lt;li&gt; To call a function, the arguments are pushed to a temporary memory area. This requires
code that knows calling convention for the target, and memory writing support.
&lt;li&gt; After that, a fake return address is placed to a stack (typically, entry point of the program), and a breakpoint is set to that return address. So this requires working breakpoints in the simulator.
&lt;li&gt; Then, debugger changes program counter to the address of &lt;code&gt;add&lt;/code&gt; and resumes program execution. 
&lt;li&gt; After hitting breakpoint, the return value of the function is extracted, which again requires knowing calling convention.
&lt;/ol&gt;

So, it's not just a poor man's calculator, it's also a test for a good deal of debugger functionality. There's also stack frame handling (up/down/where/finish), and printing of complex data types (structures/arrays), but believe me, that works as well.

It looks like my 3-month gdb and simulator hacking comes to an end, and I'll spend more time on more interesting things like improving KDevelop's debugger frontend.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-112195666121491074?l=vladimir_prus.blogspot.com" /&gt;&lt;/div&gt;  </description>
</item>
</channel>
</rss>
