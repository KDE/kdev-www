<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Aggregated Feed of KDevelop Developer's blog posts</title>
<link>http://www.kdevelop.org/</link>
<atom:link href="http://www.kdevelop.org/dynamic/blogs_rss_feeds.rss" rel="self" type="application/rss+xml" />
<description>
Aggregated Feed of KDevelop Developer's blog posts.
</description>
<language>en-us</language>
<item>
  <title>Andreas Pakulat: Finally KDevelop 4.0 final published</title>
  <link>http://apaku.wordpress.com/2010/05/01/finally-kdevelop-4-0-final-published/</link>
  <guid>http://apaku.wordpress.com/?p=203</guid>
    <pubDate>Sat, 01 May 2010 15:30:06 +0200</pubDate>
  <description>
&lt;p&gt;Those reading the dot regularly will already know it, the final release of KDevelop 4.0 is out. For more extensive information what it includes I suggest you read the &lt;a href="http://dot.kde.org/2010/05/01/kdevelop-40-stable-released-wild"&gt;dot story&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It only took us 3 years to get there and I think what we&amp;#8217;ve accomplished is quite amazing. And its just the beginning, we have various ideas how to further continue with KDevelop and bring you even more cool features and improvements. As &lt;a href="http://apaku.wordpress.com/2010/04/26/happy-soc-coding-everybody/"&gt;I already blogged&lt;/a&gt; there&amp;#8217;s two GSoC project with much potential related to KDevelop.&lt;/p&gt;
&lt;p&gt;So go &lt;a href="http://download.kde.org/stable/kdevelop/4.0.0/src"&gt;get it&lt;/a&gt;, &lt;a href="http://apaku.wordpress.com/2010/04/26/happy-soc-coding-everybody/"&gt; compile it&lt;/a&gt; and enjoy how it makes hacking on code a breeze.&lt;/p&gt;
&lt;br /&gt;  &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gocomments/apaku.wordpress.com/203/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/comments/apaku.wordpress.com/203/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godelicious/apaku.wordpress.com/203/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/delicious/apaku.wordpress.com/203/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/gostumble/apaku.wordpress.com/203/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/stumble/apaku.wordpress.com/203/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/godigg/apaku.wordpress.com/203/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/digg/apaku.wordpress.com/203/" /&gt;&lt;/a&gt; &lt;a rel="nofollow" href="http://feeds.wordpress.com/1.0/goreddit/apaku.wordpress.com/203/"&gt;&lt;img alt="" border="0" src="http://feeds.wordpress.com/1.0/reddit/apaku.wordpress.com/203/" /&gt;&lt;/a&gt; &lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D203%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>Finally KDevelop 4.0 final published</title>
  <link>http://apaku.wordpress.com/2010/05/01/finally-kdevelop-4-0-final-published/</link>
  <guid>http://apaku.wordpress.com/?p=203</guid>
  <author>apaku</author>
  <pubDate>Sat, 01 May 2010 15:30:06 +0200</pubDate>
  <description>
Those reading the dot regularly will already know it, the final release of KDevelop 4.0 is out. For more extensive information what it includes I suggest you read the dot story. It only took us 3 years to get there and I think what we&amp;#8217;ve accomplished is quite amazing. And its just the beginning, we [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D203%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>KDevelop 4.0 Stable Released into the Wild</title>
  <link>http://www.kdenews.org/2010/05/01/kdevelop-40-stable-released-wild</link>
  <guid isPermaLink="false">3073 at http://www.kdenews.org</guid>
  <author>apaku</author>
  <pubDate>Sat, 01 May 2010 14:36:44 +0200</pubDate>
  <description>
&lt;div&gt;&lt;a href="http://www.kdenews.org/taxonomy/term/13"&gt;&lt;img src="http://dot.kde.org/sites/dot.kde.org/files/category_pictures/user-identity.png" alt="Applications" title="Applications" width="48" height="48" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;The KDevelop Hackers are proud and happy to announce that KDevelop 4.0 is finally available as a stable release. Released together is the first version of KDevelop PHP plugins, which make KDevelop a very interesting option for PHP developers.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.kdenews.org/2010/05/01/kdevelop-40-stable-released-wild" target="_blank"&gt;read more&lt;/a&gt;&lt;/p&gt;  </description>
</item>
<item>
  <title>Aaron Seigo (aseigo): Plasmoids in windows</title>
  <link>http://aseigo.blogspot.com/2010/04/plasmoids-in-windows.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7615673.post-9116573654106425547</guid>
    <pubDate>Sat, 01 May 2010 02:02:48 +0200</pubDate>
  <description>
Since forever (where we define the start of time to be when I started working on Plasma) it has been possible to run Plasmoids, or any widget that Plasma can display, in a window on its own using plasmoidviewer. It isn't completely satisfactory for running widgets in a window, though, because at its heart plasmoidviewer is a development tool meant for testing and debugging Plasmoids.&lt;br /&gt;&lt;br /&gt;(By the way, did you know that there are similar apps for DataEngines and Wallpapers? plasmaengineexplorer and plasmawallpaperviewer.)&lt;br /&gt;&lt;br /&gt;Marco worked up a small proof-of-concept app in playground some time ago that lets us run Plasmoids in windows slightly more satisfactorily. Here's a shot of a clock and the microblogging Plasmoids running with a Konversation window in behind and the pretty KRuner window nearby:&lt;br /&gt;&lt;br /&gt;&lt;div align=center&gt;&lt;img src="http://plasma.kde.org/media/windowed_plasmoids.png" width="595" height="496" /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Right clicking on a Plasmoid gets you the usual suspects in the context menu along with a "Quit" entry that quits that Plasmoid. What's really cool is that they all run in the same process, keeping overhead down. Now, the goal for this isn't just to allow us to run Plasmoids in random windows on the desktop, but to provide an infrastructure for running Plasmoids full screen with Plasma Mobile in a way that is resource friendly but which also keeps the apps away from the main UI.&lt;br /&gt;&lt;br /&gt;You can move the Plasmoids around, run them with or without a window border and background and more. It is currently in kdereview, and I'm busy polishing this up for 4.5. The name of this little wonder? plasma-windowed.&lt;br /&gt;&lt;br /&gt;It currently knows about the following command line flags: -b, --border or --noborder to control the window borders (default is to have borders), -f and --fulscreen which starts the app fullscreen. This is just the start (it's only 368 LOC right now), however, and I have lots of ideas on how to make this even spiffier. :)&lt;br /&gt;&lt;br /&gt;Now we can show Plasmoids on the desktop, in panels, on a dashboard, on a mobile device, on a netbook, on a screensaver, floating about and in Amarok. Soonish we'll have them on KDM, Kontact, Skrooge and KDevelop, too. Woo!&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7615673-9116573654106425547?l%3Daseigo.blogspot.com" alt="" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>GSOC:   Revive Quanta+ Brand for KDE 4</title>
  <link>http://milianw.de/blog/gsoc-revive-quanta-brand-for-kde-4</link>
  <guid isPermaLink="false">130 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Wed, 28 Apr 2010 19:19:04 +0200</pubDate>
  <description>
&lt;p&gt;Yay I got a GSOC slot :)&lt;/p&gt;

&lt;p&gt;So I hope I don&amp;#8217;t have to introduce myself anymore to you guys. Instead I&amp;#8217;ll show you what I&amp;#8217;ve planned to do over the summer:&lt;/p&gt;

&lt;h5&gt;Motivation for Proposal / Goal:&lt;/h5&gt;

&lt;p&gt;Back in KDE 3 times, Quanta+ was one of the reasons for me to use KDE.
  In my eyes it was &lt;em&gt;the&lt;/em&gt; IDE for web development out there, and I loved to use it.
  Sadly it&amp;#8217;s bitrotting nowadays without a finished KDE 4 port. That, combined with
  the fact that more and more distributions drop all KDE 3 packages, makes the need
  for a port more urgent than ever.&lt;/p&gt;

&lt;h5&gt;Implementation Details:&lt;/h5&gt;

&lt;p&gt;Thankfully, KDevelop 4 is nearing it&amp;#8217;s first release and the KDevplatform is
  mature enough nowadays. This means that during summer I shall finish the
  port of Quanta+ to KDevplatform and supply it with all the plugins
  required for a proper webdevelopment IDE. My goal is it to provide a proper
  IDE for PHP webdevelopment. In more detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make Quanta+ 4 compile&lt;/li&gt;
&lt;li&gt;remove obsolete plugins or code parts in Quanta+&lt;/li&gt;
&lt;li&gt;port required plugins to KDevplatform structure&lt;/li&gt;
&lt;li&gt;polish PHP plugin, including XDebug support&lt;/li&gt;
&lt;li&gt;polish Script Execute plugin&lt;/li&gt;
&lt;li&gt;polish CSS plugin&lt;/li&gt;
&lt;li&gt;get a first working version of a XHTML/XML plugin, if time allows even with HTML (SGML) support

&lt;ul&gt;
&lt;li&gt;support autocompletion&lt;/li&gt;
&lt;li&gt;support inline validation&lt;/li&gt;
&lt;li&gt;support documents that use multiple languages (XML, PHP, CSS, JavaScript) at the same time&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;polish the UI/Workflow for Webdevelopment

&lt;ul&gt;
&lt;li&gt;hide KDevelop/C++ specific actions&lt;/li&gt;
&lt;li&gt;add templates for common PHP frameworks&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;if time allows, get a rough support for JavaScript (at least Outline for functions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put these all together with the existing features in KDevplatform we can reuse,
we&amp;#8217;ll end up with a hopefully useable IDE for webdevelopment. Hence my final
goal is it to release a first Beta version of Quanta+ for KDE4.&lt;/p&gt;

&lt;h5&gt;Tentative Timeline:&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;getting rough first shell of Quanta+ 4 up and running, removing old cruft, cleaning up old code and porting required things&lt;br /&gt;
&lt;em&gt;~ 3 weeks&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;polish existing plugins (PHP, XDebug, Execute Script, CSS, Upload)&lt;br /&gt;
&lt;em&gt;~ 2 weeks&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;create XHTML/XML plugin&lt;br /&gt;
&lt;em&gt;~ 3 weeks&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;polish UI/workflow&lt;br /&gt;
&lt;em&gt;~ 2 weeks&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;bug hunting etc., ending in a first beta release of Quanta+ for KDE 4:&lt;br /&gt;
&lt;em&gt;~ 2 weeks&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets see whether it works out as planned. But I think this commit shows you that I&amp;#8217;m on the right track:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://websvn.kde.org/trunk/extragear/sdk/quanta/data/pics/quanta-splash.png?revision%3D1119284%26view%3Dmarkup" title="http://websvn.kde.org/trunk/extragear/sdk/quanta/data/pics/quanta-splash.png?revision=1119284&amp;view=markup"&gt;http://websvn.kde.org/trunk/extragear/sdk/quanta/data/pics/quanta-splash&amp;#8230;&lt;/a&gt;&lt;/p&gt;  </description>
</item>
<item>
  <title>KDE no Google Summer of Code 2010</title>
  <link>http://liveblue.wordpress.com/2010/04/28/kde-no-google-summer-of-code-2010/</link>
  <guid>http://liveblue.wordpress.com/?p=784</guid>
  <author>Sandro Andrade</author>
  <pubDate>Wed, 28 Apr 2010 15:12:57 +0200</pubDate>
  <description>
O Google anunciou na última segunda-feira os alunos selecionados para o Google Summer of Code 2010: o grande programa de incentivo à participação de novos desenvolvedores em mais 150 instituições que desenvolvem software livre. O KDE é claro não poderia ficar de fora dessa. Este ano foram 50 alunos selecionados, um número recorde desde a [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dliveblue.wordpress.com%26blog%3D7344330%26post%3D784%26subd%3Dliveblue%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>Happy SoC coding everybody</title>
  <link>http://apaku.wordpress.com/2010/04/26/happy-soc-coding-everybody/</link>
  <guid>http://apaku.wordpress.com/?p=197</guid>
  <author>apaku</author>
  <pubDate>Mon, 26 Apr 2010 22:48:12 +0200</pubDate>
  <description>
Google just announced the official and final list of accepted students for the SoC program. KDE got more accepted students this year than past, so its a big success for us all. This will hopefully again be a successful SoC season for KDE, bringing new contributors and implementing lots of cool ideas. The KDevelop team [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D197%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>KDevelop 4.0 Screenshots</title>
  <link>http://apaku.wordpress.com/2010/04/25/kdevelop-4-0-screenshots/</link>
  <guid>http://apaku.wordpress.com/?p=194</guid>
  <author>apaku</author>
  <pubDate>Sun, 25 Apr 2010 21:18:14 +0200</pubDate>
  <description>
This blog entry is a supplemental to the KDevelop 4.0 release announcement to show off the new stable release with some nice screenshots. So enjoy KDevelop after starting and opening a project and file Quick Outline of the current file PHP Quick Outline Quick Open in PHP project As-You-Type Code Completion More Verbose manual Code [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D194%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>KDevelop4 RC3 released (RC2 tarballs are broken)</title>
  <link>http://apaku.wordpress.com/2010/04/16/kdevelop4-rc3-released-rc2-tarballs-are-broken/</link>
  <guid>http://apaku.wordpress.com/?p=192</guid>
  <author>apaku</author>
  <pubDate>Fri, 16 Apr 2010 20:50:50 +0200</pubDate>
  <description>
This time around svn got me, I&amp;#8217;ve used the createtarball script from kdesdk to generate the RC2 tarballs so we ship translations. This worked just fine, except that for some unknown reason svn likes to not check out svn:externals when doing an svn co of kdevplatform. This resulted in a kdevplatform tarball (yes I didn&amp;#8217;t [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D192%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>KDevelop4 Release Candidate 1</title>
  <link>http://apaku.wordpress.com/2010/04/08/kdevelop4-release-candidate-1/</link>
  <guid>http://apaku.wordpress.com/?p=186</guid>
  <author>apaku</author>
  <pubDate>Thu, 08 Apr 2010 08:51:09 +0200</pubDate>
  <description>
Finally getting around to blog about this. We&amp;#8217;ve released RC1 of KDevelop4 today. We&amp;#8217;ve fixed a couple of bugs and got some good performance improvements, but even more will be in RC2. RC2 will also ship with translations, for RC1 we&amp;#8217;ve discovered a severe problem that we couldn&amp;#8217;t fix anymore in time related to translations. [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D186%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>Where Profiling Sucks</title>
  <link>http://milianw.de/blog/where-profiling-sucks</link>
  <guid isPermaLink="false">128 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Mon, 05 Apr 2010 03:12:55 +0200</pubDate>
  <description>
&lt;p&gt;Ok, you should know by now that I love profiling and making things faster. Yet there&amp;#8217;s always a &amp;#8220;but&amp;#8221;. For me it&amp;#8217;s blocking syscalls, or anything that makes the app &amp;#8220;slow&amp;#8221; for the user but doesn&amp;#8217;t show up in Callgrind as the Instruction Fetch cost doesn&amp;#8217;t go up.&lt;/p&gt;

&lt;p&gt;The usual suspect is of course locks (which we have quite a lot in KDevelop) or QProcesses with &lt;span&gt;&lt;code&gt;waitForFinished()&lt;/code&gt;&lt;/span&gt; or similar&amp;#8230; You won&amp;#8217;t see them in any Callgrind profile. Does anyone know a way to achieve that? Something that makes Callgrind increase the Ir cost for blocking func calls depending on the time it blocks? Or some other tool that would show me these?&lt;/p&gt;

&lt;p&gt;And if you are interested: I was still able to find the cause for slow parsing of Custom Make Manager projects (Qt, Linux Kernel, &amp;#8230;) in KDevelop: The cache in the IncludePathResolver never hit, since a &lt;span&gt;&lt;code&gt;operator==&lt;/code&gt;&lt;/span&gt; was improperly implemented ;-) I really wonder how we could have missed that for so long! I&amp;#8217;ve also added some more changes that should make it much faster to parse projects that rely on the IncludePathResolver. I was personally now able to parse 10.000 files of the Linux Kernel in about 9.5 minutes. This is roughly a third of the Kernel, so I&amp;#8217;d get to a total of approx 30min. Compare that to the 2.5h for 5% that one of our users reported ;-)&lt;/p&gt;  </description>
</item>
<item>
  <title>Profiling Rocks - KDevelop CMake Support now 20x faster</title>
  <link>http://milianw.de/blog/profiling-rocks-kdevelop-cmake-support-now-20x-faster</link>
  <guid isPermaLink="false">127 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Wed, 31 Mar 2010 01:24:19 +0200</pubDate>
  <description>
&lt;p&gt;I just need to get this out quickly:&lt;/p&gt;

&lt;p&gt;We were aware that KDevelop&amp;#8217;s CMake support was slow. Too slow actually. It was profiled months ago and after a quick look that turned up QRegExp, it was discarded in fear of having to rewrite the whole parser properly, without using QRegExp. Which btw. is still a good idea of course.&lt;/p&gt;

&lt;p&gt;But well, today I felt like I should do some more tinkering. I mean I managed to optimize KDevelop&amp;#8217;s Cpp support recently (parsing Boost&amp;#8217;s huge generated template headers, like e.g. &lt;span&gt;&lt;code&gt;vector200.hpp&lt;/code&gt;&lt;/span&gt; is now 30% faster). I managed to make KGraphViewer usable for huge callgraphs I produce in Massif Visualizer. So how hard could it be to make KDevelop&amp;#8217;s CMake at least /a bit/ faster, he?&lt;/p&gt;

&lt;p&gt;Yeah well an hour later and two commits later, I managed to find and fix two bottlenecks. Both where related to QRegExp. Neither was the actual parser, instead it was the part that &lt;em&gt;evaluated&lt;/em&gt; CMake files, esp. the &lt;span&gt;&lt;code&gt;STRING(...)&lt;/code&gt;&lt;/span&gt; function. So even if we&amp;#8217;d used a proper parser generator, this would still been slow.&lt;/p&gt;

&lt;p&gt;The first one was the typical &lt;a href="http://websvn.kde.org/?view%3Drevision%26revision%3D1109255"&gt;&lt;em&gt;&amp;#8220;don&amp;#8217;t reinvent the wheel&amp;#8221;&lt;/em&gt; kinda commit&lt;/a&gt; which already made the CMake support &lt;strong&gt;two times faster&lt;/strong&gt; for projects that used &lt;span&gt;&lt;code&gt;FindQt4.cmake&lt;/code&gt;&lt;/span&gt;, i.e. any Qt or KDE project. Not bad, right? Well, while I fixed that I saw that KDevelop tried to do some Regular expression replacement on the output of &lt;span&gt;&lt;code&gt;qmake --help&lt;/code&gt;&lt;/span&gt;, this could not been right, could it? With help of Andreas and Aleix &lt;a href="http://websvn.kde.org/?view%3Drevision%26revision%3D1109277"&gt;we found the bug in the parser&lt;/a&gt; and that made the CMake support &lt;strong&gt;10 times faster.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So yeah, CMake projects using Qt or KDE should now get opened a &lt;strong&gt;whopping 20 times faster&lt;/strong&gt; in KDevelop :)&lt;/p&gt;

&lt;p&gt;I really love KCacheGrind and Valgrind&amp;#8217;s callgrind - &lt;em&gt;again&lt;/em&gt; it proved to be the most awesome tool one can imagine! If you are interested in the callgrind files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://users.physik.fu-berlin.de/~milianw/callgrind.cmake.noopt.bz2"&gt;without optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://users.physik.fu-berlin.de/~milianw/callgrind.cmake.nativeqregexpreplace.out.bz2"&gt;first optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://users.physik.fu-berlin.de/~milianw/callgrind.cmake.kdev.31may2010.bz2"&gt;second optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; with KCacheGrind from trunk you can open these compressed files transparently :)&lt;/p&gt;  </description>
</item>
<item>
  <title>KDevelop4 Beta9 released</title>
  <link>http://apaku.wordpress.com/2010/03/08/kdevelop4-beta9-released/</link>
  <guid>http://apaku.wordpress.com/?p=180</guid>
  <author>apaku</author>
  <pubDate>Mon, 08 Mar 2010 22:37:01 +0100</pubDate>
  <description>
Yeah, finally, this marks the end of a rather long line of beta&amp;#8217;s. The first one is more than a year old! But it also means we&amp;#8217;re finally getting closer to a 4.0 release. Now its time to go through the open bugreports for KDevelop and KDevPlatform. Also make sure you read the dot story [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D180%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>Custom Buildsystem Support for KDevelop4</title>
  <link>http://apaku.wordpress.com/2010/02/19/custom-buildsystem-support-for-kdevelop4/</link>
  <guid>http://apaku.wordpress.com/?p=174</guid>
  <author>apaku</author>
  <pubDate>Fri, 19 Feb 2010 22:58:42 +0100</pubDate>
  <description>
A bit of background first: The buildsystem we (as in froglogic) use for Squish is custom written using Javascript and that means its not very nice to use KDevelop for hacking on the code. The reason is that KDevelop4 needs to know about includes and defines from the projects buildsystem to provide proper autocompletion and [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D174%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>Kate/KDevelop HackSprint - Up To Day 4</title>
  <link>http://milianw.de/blog/katekdevelop-hacksprint-up-to-day-4</link>
  <guid isPermaLink="false">122 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Wed, 17 Feb 2010 18:43:38 +0100</pubDate>
  <description>
&lt;p&gt;Woha, quite a few days flew by without me blogging about anything. Thankfully the others started to write so I don&amp;#8217;t have to repeat it all ;-) Instead I&amp;#8217;ll concentrate on stuff I did or learned.&lt;/p&gt;

&lt;h5&gt;GHNS for Snippets&lt;/h5&gt;

&lt;p&gt;Well, first I think an excuse is in oder: There is a GHNS button for Kate Snippets in 4.4.0 but it&amp;#8217;s broken, neither me nor Joseph had time to acutally use and fix it&amp;#8230; But anyways, I fixed it now for 4.4.1. For 4.5 we&amp;#8217;ll also have an Upload Dialog.&lt;/p&gt;

&lt;p&gt;I also added &lt;strong&gt;both&lt;/strong&gt; now to KDevelop, you can now upload and download snippets from it. I added a few dump examples but will probably improve it steadily.&lt;/p&gt;

&lt;h5&gt;Kate Performance&lt;/h5&gt;

&lt;p&gt;On Saturday and Sunday I started to profile Kate highlighting for a large MySQL dump and managed to greatly improve the speed. Actually the funny thing is that I could improve RegExp based highlighting (you still should try to prevent using it, it will always be slower than simple char/string based highlighting). And the knowledge for this optimization I had from my time as an active contributor for &lt;a href="http://qbnz.com/highlighter/"&gt;GeSHi&lt;/a&gt;. I feel like it was ages ago, he funny :)&lt;/p&gt;

&lt;p&gt;So if anybody has a big file that takes ages to load (but only if you use KDE 4.5 trunk or higher), tell me and give me the file. I might find some more ways to optimize different languages.&lt;/p&gt;

&lt;h5&gt;Other Stuff&lt;/h5&gt;

&lt;p&gt;Other than that I also managed to fix a few more bugs in Kate and KDevelop and had a good time with the other guys here in Berlin. Yesterday I showed some others how I spent quite a few nights: Partying in Berlin is nice :)&lt;/p&gt;

&lt;p&gt;Oh and Bernhard showed me a little gem of his: &lt;a href="http://github.com/shentok/kate-standalone"&gt;Kate Standalone&lt;/a&gt; which you can use to build &lt;em&gt;only&lt;/em&gt; KatePart from kdelibs trunk. This actually works very well (up until some new API from KDE trunk is used).&lt;/p&gt;  </description>
</item>
<item>
  <title>Writing unittests for KDevelop plugins</title>
  <link>http://apaku.wordpress.com/2010/02/17/writing-unittests-for-kdevelop-plugins/</link>
  <guid>http://apaku.wordpress.com/?p=171</guid>
  <author>apaku</author>
  <pubDate>Wed, 17 Feb 2010 16:00:29 +0100</pubDate>
  <description>
After just completing a basic unit-test for a KDevelop4 plugin I&amp;#8217;m currently working on I realized that its really easy, but we lack some simple examples how to do this. So I sat down and added an article to our Wiki that explains how a basic unittests for a KDevelop4 plugin is structured and how [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D171%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>Kate/KDevelop HackSprint Day 1</title>
  <link>http://milianw.de/blog/katekdevelop-hacksprint-day-1</link>
  <guid isPermaLink="false">121 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Sun, 14 Feb 2010 00:58:53 +0100</pubDate>
  <description>
&lt;p&gt;So, first day of the Kate/KDevelop hacksprint.&lt;/p&gt;

&lt;p&gt;We just talked and hacked at the rented flat,got to know each other and had a fun time. Everybody made it more or less in time, even last minute attendee Adymo from Ukraine, nice! Hacking-wise the productivity wasn&amp;#8217;t that high, esp. for me, but a few patches got committed here and there.&lt;/p&gt;

&lt;p&gt;Right now I&amp;#8217;m working on a little speedup for Kate, esp. for big MySQL files - lets see how it turns out. Cullmann showed me a few things I could do so maybe it works out, lets see.&lt;/p&gt;

&lt;p&gt;Over the next week I plan to push in user configurable include paths for the PHP plugin and do some more Snippets &amp; Scripting work in Kate, lets see how it turns out. I&amp;#8217;ll go home now, kinda sucks that I don&amp;#8217;t stay with the others here at the flat but have to take a 1h ride into the city&amp;#8230; Berlin is definitely too big :D&lt;/p&gt;  </description>
</item>
<item>
  <title>KDevelop4 Beta8</title>
  <link>http://apaku.wordpress.com/2010/02/13/kdevelop4-beta8/</link>
  <guid>http://apaku.wordpress.com/?p=167</guid>
  <author>apaku</author>
  <pubDate>Sat, 13 Feb 2010 18:48:38 +0100</pubDate>
  <description>
I&amp;#8217;m pleased to announce (as first as it seems) that KDevelop4 released its 8th Beta. This is mostly a bugfix release as we are slowly (but steadily) moving towards a final release. There&amp;#8217;s going to be another Beta soon with (hopefully) some more features as the KDevelop/Kate Sprint just started. Additionally to kdevelop+kdevplatform you&amp;#8217;ll find [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D167%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>Paris, Bruxelles</title>
  <link>http://www.proli.net/2010/02/04/paris-bruxelles/</link>
  <guid>http://www.proli.net/?p=85</guid>
  <author>apol</author>
  <pubDate>Thu, 04 Feb 2010 19:20:02 +0100</pubDate>
  <description>
Hey! Yes, I&amp;#8217;m still alive!!
Last week I moved to Paris since I will be staying here for 4 months studying at EFREI studying my last lecture credits for my university. That&amp;#8217;s great because that way I get to know better the city and practice the language a little more, which is always nice  .
But [...]  </description>
</item>
<item>
  <title>Snippets In KDevelop / Kate</title>
  <link>http://milianw.de/blog/snippets-in-kdevelop-kate</link>
  <guid isPermaLink="false">119 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Wed, 03 Feb 2010 16:59:46 +0100</pubDate>
  <description>
&lt;p&gt;Hey all!&lt;/p&gt;

&lt;p&gt;Just wanted to give you a little rundown on Snippets in Kate 4.4 (via the snippets_tng plugin) and KDevelop Beta 8 (soon to be released).&lt;/p&gt;

&lt;p&gt;Note: The Kate plugin was written by Jowenn and introduced me to all these nice features. For KDevelop I wrote a somewhat simpler yet imo better implementation. We will try to get the best of both worlds into KDE 4.5. Stay tuned!&lt;/p&gt;

&lt;h5&gt;General Usage &amp; Features&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;create a snippet repository (or download via GHNS [see below])&lt;/li&gt;
&lt;li&gt;create snippets in that repository&lt;/li&gt;
&lt;li&gt;insert snippets via the snippets view (i.e. double click), or (imo better/faster) insert them via code-completion (remember: CTRL + Space requests code completion at the current cursor position!).&lt;/li&gt;
&lt;li&gt;snippet gets inserted (properly indented) and potential placeholders/variables get expanded. A variable is something like &lt;span&gt;&lt;code&gt;%{date}&lt;/code&gt;&lt;/span&gt; or &lt;span&gt;&lt;code&gt;${email}&lt;/code&gt;&lt;/span&gt;. Also take a look at the &lt;a href="http://api.kde.org/4.x-api/kdelibs-apidocs/interfaces/ktexteditor/html/classKTextEditor_1_1TemplateInterface.html"&gt;API documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;variables that get inserted via &amp;#8220;${&amp;#8230;}&amp;#8221; will be &amp;#8220;selectable&amp;#8221;, meaning you can jump from one var to the other by hitting TAB / Shift TAB&lt;/li&gt;
&lt;li&gt;the &lt;span&gt;&lt;code&gt;%{...}&lt;/code&gt;&lt;/span&gt; vars will only get expanded and inserted, without getting selectable.&lt;/li&gt;
&lt;li&gt;multiple occurrences of the same variable will be updated once one of them gets edited, something that is called &amp;#8220;mirroring&amp;#8221; in other editors.&lt;/li&gt;
&lt;li&gt;once one edits ESC the cursor is placed at the end of the snippet or to the first occurrence of &lt;span&gt;&lt;code&gt;${cursor}&lt;/code&gt;&lt;/span&gt; or &lt;span&gt;&lt;code&gt;%{cursor}&lt;/code&gt;&lt;/span&gt; and the user types something, the snippet-handler quits and you are left with your normal editor until you insert the next snippet&lt;/li&gt;
&lt;li&gt;nested snippets (i.e. insert snippet than insert another one) should &amp;#8220;just work&amp;#8221;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;Snippet Management&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;group snippets by file type, i.e. PHP snippets will only be offered during code completion when one edits a PHP file.&lt;br /&gt;
Note: In KDevelop and KDE 4.4 nested documents are supported, e.g. create a CSS snippet and it will be shown inside the CSS parts of a HTML document or similar. This uses my HighlightInterface I wrote for KDE 4.4. I still have to rewrite some parts of the snippets_tng plugin for Kate so that it works there as well&lt;/li&gt;
&lt;li&gt;group snippets in repositories, set an Author and a License of your choice&lt;/li&gt;
&lt;li&gt;publish snippet repositories via GHNS: In Kate you can already download snippets from GHNS but we sadly don&amp;#8217;t have any repos up on opendesktop&amp;#8230; I&amp;#8217;ll have to add some prior to KDE 4.4. Also we didn&amp;#8217;t have enough time to implement uploading of Repos from inside Kate in time for KDE 4.4. So stay tuned for KDE 4.5. KDevelop currently has no support for GHNS, but I plan to fix this tomorrow or the next days - together with uploading from inside KDevelop, i.e. all the nice features of GHNS v3.&lt;/li&gt;
&lt;li&gt;in KDevelop (and someday in Kate as well) you can simply select a part of your currently opened document and select the &amp;#8220;create snippet from selection&amp;#8221; in the ContextMenu - easy &amp; fast!&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;TODO&lt;/h5&gt;

&lt;p&gt;There&amp;#8217;s much to do.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highest priority right now for me is to get GHNS with all bells and whistles supported for KDevelop.&lt;/li&gt;
&lt;li&gt;Then I&amp;#8217;ll merge and integrate the Kate &amp; KDevelop plugins as much as possible, so we have a reduce code base.&lt;/li&gt;
&lt;li&gt;Also important is to make all shortcuts configurable&lt;/li&gt;
&lt;li&gt;Another thing is: How could we improve interoperability even between e.g. editors like TextMate or Gedit? Both have snippets features and their bundles are available in the net. If we can support those we&amp;#8217;d save us a lot of work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, I should probably do a screencast&amp;#8230; Not now though ;-)&lt;/p&gt;  </description>
</item>
<item>
  <title>progress in PHP support for KDevelop</title>
  <link>http://milianw.de/blog/progress-in-php-support-for-kdevelop</link>
  <guid isPermaLink="false">116 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Wed, 20 Jan 2010 13:44:50 +0100</pubDate>
  <description>
&lt;p&gt;Hey everyone. Been some time since I last blogged&amp;#8230; I want to take the chance to give you all a bit of overview over the last changes in the PHP plugin for KDevelop:&lt;/p&gt;

&lt;h5&gt;Performance Improvements&lt;/h5&gt;

&lt;p&gt;I spent quite some time profiling various aspects of the PHP plugin, be it parsing and DUChain building over to (just yesterday) code completion. I&amp;#8217;m confident to say that I found (and removed) quite a few bottlenecks, making the plugin much more comfortable to use.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m really blown away time over time again by valgrind &amp; KCachegrind&amp;#8230; What would we do without these tools?&lt;/p&gt;

&lt;h5&gt;Documentation&lt;/h5&gt;

&lt;p&gt;An (imo) very strong point for using KDevelop for PHP programming is it&amp;#8217;s seamless support for documentation. Be it the &amp;#8220;simple&amp;#8221; inline documentation in the Declaration Tooltips or the extended integration of the remote PHP.net docs. But these past days I improved our generator for the inline documentation of built-in PHP language constructs considerably:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add documentation for function/method parameters&lt;/li&gt;
&lt;li&gt;add &lt;span&gt;&lt;code&gt;@since&lt;/code&gt;&lt;/span&gt; where appropriate&lt;/li&gt;
&lt;li&gt;fix some missing declarations or bugs, esp. some that where part of SPL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These changes increased the size of the generated file to whopping 3.1M. This was too much for me and hence I added support to ship this file zipped (i.e. now it&amp;#8217;s 80% smaller) and we decompress it transparently with the use of &lt;span&gt;&lt;code&gt;KZip&lt;/code&gt;&lt;/span&gt;. Adding such a feature was a breeze, so nice to work with the KDE Api :)&lt;/p&gt;

&lt;p&gt;There are still a few things missing and stuff I plan to improve here, so stay tuned for more news in this regard.&lt;/p&gt;  </description>
</item>
<item>
  <title>Will code for food</title>
  <link>http://milianw.de/blog/will-code-for-food</link>
  <guid isPermaLink="false">114 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Tue, 22 Dec 2009 04:34:31 +0100</pubDate>
  <description>
&lt;p&gt;Ha, what a bit of a bribe can do to me&amp;#8230; Someday earlier today a user of the PHP plugin for KDevelop brought up the flickering issue in it again. Well as I told him: I myself find it very annoying and wanted to fix it since quite some time, but never got around to it&amp;#8230; Usually that would be it and I&amp;#8217;d go watch some more FamilyGuy until I&amp;#8217;m in the mood to track this bugger down. But well, thankfully Phlogi wasn&amp;#8217;t so easy to dispatch:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;lt;Phlogi&gt; milian: ok&amp;#8230; I&amp;#8217;ll send you pizza and beer if you fix this!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hours of &lt;span&gt;&lt;code&gt;gdb&lt;/code&gt;&lt;/span&gt; sessions later, I finally committed a fix. So Phlogi, if you read this: You owe me ;-)&lt;/p&gt;

&lt;p&gt;To all others: If you tried the PHP plugin out and the flickering was too much for you: Give it a try again! I&amp;#8217;m personally totally overwhelmed, the difference is huge! I often perceived the PHP plugin to be magnitudes slower than the C++ one. Well, looks like most of this was only due to the flickering. Now things are &lt;em&gt;much&lt;/em&gt; smoother.&lt;/p&gt;

&lt;p&gt;Happy holidays!&lt;/p&gt;  </description>
</item>
<item>
  <title>PHP and PHP-Docs plugins now up for review (meaning: SVN location moved!)</title>
  <link>http://milianw.de/blog/php-and-php-docs-plugins-now-up-for-review-meaning-svn-location-moved</link>
  <guid isPermaLink="false">113 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Thu, 17 Dec 2009 21:29:41 +0100</pubDate>
  <description>
&lt;p&gt;Hey all!&lt;/p&gt;

&lt;p&gt;Just a quick note: Niko and me moved PHP &amp; PHP-Docs to &lt;span&gt;&lt;code&gt;kdereview&lt;/code&gt;&lt;/span&gt;, we hope to move both plugins to &lt;span&gt;&lt;code&gt;extragear/sdk/kdevelop-plugins&lt;/code&gt;&lt;/span&gt;. So, if I understood things correctly, after a two week period the plugins will get moved there (well, if we pass the review, but I think we can do that).&lt;/p&gt;

&lt;p&gt;So for anybody that uses the plugins from SVN, you&amp;#8217;ll have to relocate. The new addresses are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;/trunk/kdereview/kdevelop-php&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;&lt;code&gt;/trunk/kdereview/kdevelop-php-docs&lt;/code&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you in two weeks :)&lt;/p&gt;  </description>
</item>
<item>
  <title>Real FOSS appreciation</title>
  <link>http://milianw.de/blog/real-foss-appreciation</link>
  <guid isPermaLink="false">110 at http://milianw.de</guid>
  <author>Milian Wolff</author>
  <pubDate>Mon, 07 Dec 2009 02:25:04 +0100</pubDate>
  <description>
&lt;p&gt;So, it&amp;#8217;s been roughly a year since my first commit to kdelibs. According to Ohloh it&amp;#8217;s been in November 2008.  And boy have I learned much in this year. I learned C++ just to be able to contribute to KDE, since I thought it would be awesome to be able to &amp;#8220;fix your own itch&amp;#8221;.  I have to say: It was the best decision I ever made.&lt;/p&gt;

&lt;p&gt;I really came to appreciate FOSS in a whole new light: Contributing to a big project like KDE gets you in contact with lots of nice people. And they will help you get things done. What&amp;#8217;s better is that in the process you learn lots of things. And I mean lots. I can now use GDB, Valgrind, now my way around some parts of the KDE/Qt API, can investigate performance related questions&amp;#8230; And since these are such huge topics, there&amp;#8217;s always more to learn, much more!&lt;/p&gt;

&lt;p&gt;I doubt someone could learn that much by reading books or writing his own little application without the help of a community. The wealth of possibilities inside KDE will increase your horizon constantly. And there is tons of very good code to study! Want to know why something is not working? Look at the source. Still not helping? Ask your fellow developers. I really have to say it&amp;#8217;s an awesome feeling to be part of this big community.&lt;/p&gt;

&lt;h5&gt;Fixing an itch: Qalculate! backend for Cantor&lt;/h5&gt;

&lt;p&gt;You know, I&amp;#8217;m officially a Physics student, I just happen to be way more interested in programming (the practical part of it, not really that much the theoretical part).&lt;/p&gt;

&lt;p&gt;Since I started with Physics two years ago, I always required a good calculator, esp. for experimental physics. The best calculator I found was &lt;a href="http://qalculate.sourceforge.net/"&gt;Qalculate!&lt;/a&gt;, especially it&amp;#8217;s great support for units and constants made me solve tedious exercises in a fraction of the time it required my fellow students that could not use Qalculate (it only runs on Linux). Really, it&amp;#8217;s an outstanding piece of software in my opinion.&lt;/p&gt;

&lt;p&gt;But to get to the point: Qalculate was the last KDE 3 app on my desktop, and I wanted to change that. Now I read about &lt;a href="http://edu.kde.org/cantor/"&gt;Cantor&lt;/a&gt;, esp. once fellow KDevelop hacker Apol wrote about his &lt;a href="http://www.proli.net/2009/11/07/kalgebra-everywhere/"&gt;KAlgebra backend for Cantor&lt;/a&gt;, and I knew: This is the perfect fit for libqalculate!&lt;/p&gt;

&lt;p&gt;So last week I started and already have a somewhat working backend available:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://websvn.kde.org/trunk/playground/edu/cantor-backends/qalculate/"&gt;http://websvn.kde.org/trunk/playground/edu/cantor-backends/qalculate/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This once again showed the utterly insane greateness of FOSS: I started to hack on the backend and looked at the existing backends for guidance. I also contacted arieder, the author of Cantor, directly and chatted with him, getting help. But I did not only /take/. I reviewed his API, gave suggestions, reported whishes and bugs and eventually hacked a little bit on the sources themselves. Imagine this in a corporate environment: I&amp;#8217;d probably have had to report in some shabby tracker and wait ages for my feature request to be closed as wontfix&amp;#8230;&lt;/p&gt;

&lt;p&gt;And while writing the backend I had this realization that also triggered this blog post: I actually did something useful in a few days. I could never have imagined being in that position one year ago. I always thought that C++ was a bit of black magic, especially writing things from scratch. But now&amp;#8230; Now I&amp;#8217;m somehow able to grasp code and come up with something working in a few days.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;problem&lt;/em&gt; this brings, is of course that you can easily loose track and overload yourself with work&amp;#8230; I could spent lots of hours in any part of KDE. My TODO alone bears for KatePart, KDevelop-PHP, KDevelop itself, Quanta, &amp;#8230;. You name it! I think this will become a fun holiday ;-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS:&lt;/strong&gt; Just a quick note: I really think that Cantor will become a great and useful application for science students. It will be your central application for any calculations, either numeric (e.g. Qalculate) or symbolic (e.g. Maxima).&lt;/p&gt;  </description>
</item>
<item>
  <title>KDevelop4 moved</title>
  <link>http://apaku.wordpress.com/2009/11/29/kdevelop4-moved/</link>
  <guid>http://apaku.wordpress.com/?p=163</guid>
  <author>apaku</author>
  <pubDate>Sun, 29 Nov 2009 21:48:05 +0100</pubDate>
  <description>
As we decided that we won&amp;#8217;t make the KDE 4.4 schedule and drop out of it, we thought that we should also play by the KDE policy rules and move out of trunk/KDE. That move has just happened and KDevelop, KDevPlatform and Quanta can now be found under trunk/extragear/sdk/. Everybody who&amp;#8217;s running svn now needs [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dapaku.wordpress.com%26blog%3D1182522%26post%3D163%26subd%3Dapaku%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>KDevelop4 UI: Areas, Working Sets, etc.</title>
  <link>http://zwabel.wordpress.com/2009/06/21/kdevelop4-ui-areas-working-sets-etc/</link>
  <guid>http://zwabel.wordpress.com/?p=154</guid>
  <author>zwabel</author>
  <pubDate>Sun, 21 Jun 2009 23:58:55 +0200</pubDate>
  <description>
General Progress A lot is happening in KDevelop4 these days. Now it&amp;#8217;s nearly already 2 Months ago that we had our developer meeting in Ukraine. We had a lot of fun, although for me the trip started two days late. I didn&amp;#8217;t get my passport in time, damn. But once there, I got quite productive. [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dzwabel.wordpress.com%26blog%3D2107769%26post%3D154%26subd%3Dzwabel%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>STL Visualization</title>
  <link>http://vladimir_prus.blogspot.com/2009/06/stl-visualization.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-4159580028601221130</guid>
  <author>Vladimir Prus</author>
  <pubDate>Sat, 06 Jun 2009 19:24:00 +0200</pubDate>
  <description>
As of today, KDevelop can nicely display std::vector&lt;std::string&gt;. I'll probably omit the obvious snapshot, and will point to a &lt;a href="http://lists.kde.org/?l%3Dkdevelop%26m%3D125326438617051%26w%3D2"&gt;mailing list post&lt;/a&gt; with instructions for trying it. Instead, I'll tell the story of this feature.

&lt;p&gt;
For its entire history, GDB did not have any official way to display types from the C++ Standard Library in a sensible way. Several third-party scripts appeared, written in GDB's internal scripting language. However, they were fairly limited. You had to explicitly run those scripts, and all you got was text output without structure, making robust IDE integration impossible. Also, GDB's scripting language is itself unpleasant, and does not even have access to internal data structures and functions. It was clear that we need a way to write pretty-printers using real scripting language, with full access to GDB data structures, and proper integration with frontend interface.

&lt;p&gt;
The first prototype of Python-based pretty printing was written by myself during free hack slot at a CodeSourcery company meeting. It took maybe 4 hours, if not less, and could display std::string as string automatically. Some 4 hours more lead to the &lt;a href="http://sourceware.org/ml/gdb/2008-02/msg00140.html"&gt;first public prototype&lt;/a&gt;. This version could automatically display std::vector as "[1,2]". The &lt;a href="http://sourceware.org/ml/gdb/2008-04/msg00189.html"&gt;second prototype&lt;/a&gt; could finally display elements of std::vector as children, like one would expect in a variables tree of a frontend, and even report when new elements are added to the vector. However, this version took a couple of days of work, exposed a mere 4 functions from GDB to Python, and was a mess internally. It was clearly already outside the "quick hack" range.

&lt;p&gt;
Those prototypes would never turn into anything, were it not for &lt;a href="http://tromey.com/blog/"&gt;Tom Tromey&lt;/a&gt; and &lt;a href="http://blog.bauermann.eng.br/category/english/"&gt;Thiago Bauermann&lt;/a&gt;, who started a project to add complete Python scripting to GDB. This is much more ambitious than just pretty-printing. In particular, it includes defining new commands in Python, with full access to GDB internals. You can read more details in a &lt;a href="http://tromey.com/blog/?p%3D494"&gt;post series&lt;/a&gt; by Tom. 

&lt;p&gt;
Pretty-printing became a part of that large effort, and was greatly improved. One of the most notable change was incremental fetch of children. According to the C++ standard, an object does not exist until its constructor has exited. However, gcc debug info just lists all local variables in a block. A naive pretty-printer, when invoked on such a variable, would likely go into uncharted part of memory trying to fetch all children, and never return. To fix this, the Python pretty-printers were designed to use incremental fetch, using Python iterators, and GDB MI interface was also adjusted to be more incremental (yes, it's a &lt;a href="http://vladimir_prus.blogspot.com/2007/02/debugger-stories-stack-widget.html"&gt;trend&lt;/a&gt;). Beyond that, we've spend at least 3 weeks iterating on finer details. The GDB patch was finally checked in on Sep 15, and KDevelop4 patch shortly after.

&lt;p&gt;
This is still early implementation, and might have bugs, but now it's out for everybody to try.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-4159580028601221130?l%3Dvladimir_prus.blogspot.com" alt="" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>KDevelop error display</title>
  <link>http://vladimir_prus.blogspot.com/2009/05/kdevelop-error-display-and-breadcrumbs.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-320232628064889202</guid>
  <author>Vladimir Prus</author>
  <pubDate>Wed, 20 May 2009 18:22:00 +0200</pubDate>
  <description>
For quite a while I wanted KDevelop to display compilation errors directly inside the editor, as opposed to separate window you have to click in. It works now, as shown below.
&lt;a href="http://4.bp.blogspot.com/_DUtp0m1tSPk/ShQuiXO4JzI/AAAAAAAAAFM/gz1hyKS18pI/s1600-h/inline_error.jpg"&gt;&lt;img style="margin: 0px auto 10px; display: block; text-align: center; cursor: pointer; width: 400px; height: 288px;" src="http://4.bp.blogspot.com/_DUtp0m1tSPk/ShQuiXO4JzI/AAAAAAAAAFM/gz1hyKS18pI/s400/inline_error.jpg" alt="" id="BLOGGER_PHOTO_ID_5337942626227726130" border="0" /&gt;&lt;/a&gt;

This was implemented by Ivan Ruchkin, a student at Moscow State University, who will be defending a term paper about various KDevelop-related work tomorrow. The patches will be posted to appropriate mailing lists right after that.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-320232628064889202?l%3Dvladimir_prus.blogspot.com" alt="" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Really rapid C++ development with KDevelop4</title>
  <link>http://zwabel.wordpress.com/2009/03/13/really-rapid-c-development-with-kdevelop4/</link>
  <guid>http://zwabel.wordpress.com/?p=104</guid>
  <author>zwabel</author>
  <pubDate>Fri, 13 Mar 2009 21:52:54 +0100</pubDate>
  <description>
Code Assistants When developing for a statically typed language like C++, there usually is quite a bit of redundancy during the development, especially when creating a completely new piece of code. A powerful IDE with deep code understandic theoretically could save a significant amount of the writing work. My goal with KDevelop4 is to allow [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dzwabel.wordpress.com%26blog%3D2107769%26post%3D104%26subd%3Dzwabel%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>Typedefs in Templates, and Code-Completion</title>
  <link>http://zwabel.wordpress.com/2009/03/06/typedefs-in-templates-and-code-completion/</link>
  <guid>http://zwabel.wordpress.com/?p=90</guid>
  <author>zwabel</author>
  <pubDate>Fri, 06 Mar 2009 15:28:36 +0100</pubDate>
  <description>
Sometimes you have to decide between being &amp;#8220;correct&amp;#8221;, and being user-friendly. Also, sometimes you have to do one painful change with many regressions, to reach an ultimately better state. I hope I had to do the last such step before the stable KDevelop release(Though you never know). I have changed the internal representation of the [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dzwabel.wordpress.com%26blog%3D2107769%26post%3D90%26subd%3Dzwabel%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>KDevelop4’s Documentation Integration</title>
  <link>http://www.proli.net/2009/02/28/kdevelop4s-documentation-integration/</link>
  <guid>http://www.proli.net/?p=47</guid>
  <author>apol</author>
  <pubDate>Sat, 28 Feb 2009 16:59:25 +0100</pubDate>
  <description>
I&amp;#8217;m back to you today to show something that we have been baking lately for KDevelop. It is its new documentation integration.
With KDevelop 4 we have been focusing on putting together the information that the user will be willing to read every moment. Until now, while browsing the code, we were only showing the information [...]  </description>
</item>
<item>
  <title>KDevelop4: Creating a Qt slot, the cool way</title>
  <link>http://zwabel.wordpress.com/2009/02/13/creating-a-qt-slot-the-cool-way/</link>
  <guid>http://zwabel.wordpress.com/?p=81</guid>
  <author>zwabel</author>
  <pubDate>Fri, 13 Feb 2009 23:52:21 +0100</pubDate>
  <description>
In an earlier blog-post I&amp;#8217;ve already written about automatic signal/slot matching and completion(See this). The code-completion box shows you the appropriate connectable signals and slots, and also shows exactly what signals match what slots. Now what if you have a signal, and you know want to connect to it, but you don&amp;#8217;t have a matching [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dzwabel.wordpress.com%26blog%3D2107769%26post%3D81%26subd%3Dzwabel%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>KDevelop4: Automatic include-directives and forward-declarations</title>
  <link>http://zwabel.wordpress.com/2009/02/04/automatic-include-directives-and-forward-declarations/</link>
  <guid>http://zwabel.wordpress.com/?p=64</guid>
  <author>zwabel</author>
  <pubDate>Wed, 04 Feb 2009 02:09:21 +0100</pubDate>
  <description>
Missing Include Completion C++ is a great and powerful programming-language. Yet it has the downside against some other languages, that you always have to deal with include-directives or forward-declarations before you can use a class. This is a factor that often motivates me not to create too many different source-files, although design-wise that would make [...]&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dzwabel.wordpress.com%26blog%3D2107769%26post%3D64%26subd%3Dzwabel%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>C++ IDE Evolution: From Syntax Highlighting to Semantic Highlighting</title>
  <link>http://zwabel.wordpress.com/2009/01/08/c-ide-evolution-from-syntax-highlighting-to-semantic-highlighting/</link>
  <guid>http://zwabel.wordpress.com/?p=53</guid>
  <author>zwabel</author>
  <pubDate>Thu, 08 Jan 2009 04:19:05 +0100</pubDate>
  <description>
Most of us developers are so acccustomed to syntax highlighting, that we couldn't live without it. Syntax highlighting helps us keeping an overview or finding the place we're searching for. However it can not help us actually understanding the code. That's where Semantic Highlighting comes into play.&lt;img alt="" border="0" src="http://stats.wordpress.com/b.gif?host%3Dzwabel.wordpress.com%26blog%3D2107769%26post%3D53%26subd%3Dzwabel%26ref%3D%26feed%3D1" /&gt;  </description>
</item>
<item>
  <title>Guademy and GSoC</title>
  <link>http://www.proli.net/2008/04/28/guademy-and-gsoc/</link>
  <guid>http://www.proli.net/2008/04/28/guademy-and-gsoc/</guid>
  <author>apol</author>
  <pubDate>Mon, 28 Apr 2008 09:51:22 +0200</pubDate>
  <description>
Yes, this year you will have to put up with me with another Google Summer of Code project (well, mainly Matt Rogers, who is mentoring me again   ). This year I&amp;#8217;ll try to get KDevelop (KDevPlatform) to be able to use plugins written on different languages through Kross. Great!  
On the other [...]  </description>
</item>
<item>
  <title>KDevelop hackaton</title>
  <link>http://www.proli.net/2008/04/21/kdevelop-hackaton/</link>
  <guid>http://www.proli.net/2008/04/21/kdevelop-hackaton/</guid>
  <author>apol</author>
  <pubDate>Mon, 21 Apr 2008 13:40:12 +0200</pubDate>
  <description>
I am back from Munich, I am at the university now actually  .
It was a great week though, lots of hacking, knowing people and community building. It is always nice to know the people which have been sharing with you bugs and features  . It was kind of sad leaving the place but [...]  </description>
</item>
<item>
  <title>KDevelop Developer Meeting – Day[0]</title>
  <link>http://www.proli.net/2008/04/12/kdevelop-developer-meeting-day0/</link>
  <guid>http://www.proli.net/2008/04/12/kdevelop-developer-meeting-day0/</guid>
  <author>apol</author>
  <pubDate>Sat, 12 Apr 2008 17:39:16 +0200</pubDate>
  <description>
So today the KDevelop hackaton started. Yesterday I spent all the day just to go to Munich, where the hackaton is happening.
It was an usual trip: Police trying to get you naked when checking if you have no weapons, train delays (yeah in Germany, I thought that this didn&amp;#8217;t happen here   and some [...]  </description>
</item>
<item>
  <title>Debugger stories: pending breakpoints</title>
  <link>http://vladimir_prus.blogspot.com/2007/12/debugger-stories-pending-breakpoints.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-4257384193346886291</guid>
  <author>Vladimir Prus</author>
  <pubDate>Fri, 21 Dec 2007 19:47:00 +0100</pubDate>
  <description>
KDevelop 3.5 has a subtle bug. Sometimes, when you step over a function call, you don't stop on the next line. Instead, the application is resumed until it hits a breakpoint, or exits. This bug, in fact, is consequence of how breakpoints in shared libraries are implemented.
&lt;p&gt;
Suppose you've just started a debugger, and try to set a breakpoint on a function in a shared library. The library itself might not be loaded yet, in which case GDB cannot find the address of the symbol to set the low-level breakpoint. To handle this case, starting with version 6.1, GDB supports &lt;span&gt;pending breakpoints&lt;/span&gt;.  Such breakpoints don't correspond to any address in program, they only keep the specified breakpoint location as string. Whenever a new shared library is loaded, GDB tries to re-parse breakpoint location again, and if that succeeds, creates an ordinary breakpoint.
&lt;p&gt;
Now, this does not work when using the MI interface, for a couple of reasons:
&lt;ul&gt;&lt;li&gt;When a pending breakpoint is resolved, it is deleted, and new one is created. And GDB fails to inform MI frontend about this.
&lt;/li&gt;&lt;li&gt;It's actually not possible to create pending breakpoint using MI at all.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;
Because of these issues (and a bit of historic reasons) KDevelop 3.5 simulates pending breakpoints. GDB is asked to stop whenever a shared library is loaded, and when that happens, KDevelop tries to reinsert breakpoints. This works pretty well, except for the bug I mention in the beginning. Suppose you're stepping over a function call (this uses the "next" command on GDB level). The function opens some shared library, and which point GDB stops and KDevelop tries to reinsert breakpoints. After that KDevelop would like to continue the "next" operation, but it's already aborted by GDB. All we can do is continue the program.
&lt;p&gt;
But it's not longer the case today. As I wrote &lt;a href="http://vladimir_prus.blogspot.com/2007/11/breakpoints-in-constructors.html"&gt; earlier&lt;/a&gt; GDB was recently modified so that a breakpoint can correspond to several addresses, such as of template instantiations. A breakpoint is re-evaluated each time a shared library is loaded or unloaded, and locations are added to breakpoint and removed as appropriate, but it remains the same breakpoint. The nice side effect is that pending breakpoints are now just breakpoints with zero locations, that are reevaluated just like other breakpoints, and don't ever change their number.
&lt;p&gt;
In addition to that, I wrote patches to add pending breakpoint support to MI -- which mainly involved getting rid of two parallel breakpoint-setting code paths -- one for MI and one for CLI. Thanks to review of Joel Brobecker and Daniel Jacobowitz, those patches went in GDB CVS eariler this month. KDevelop 3.5 SVN was modified to automatically detect and use this GDB feature. So, if you're willing to build CVS HEAD of gdb and KDevelop from KDE 3.5 branch, you can finally have breakpoints in shared library just working.
&lt;p&gt;
This was probably my last KDevelop 3.5 commit. KDevelop 4 is ahead.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-4257384193346886291?l%3Dvladimir_prus.blogspot.com" alt="" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Debugger Stories: Stack widget</title>
  <link>http://vladimir_prus.blogspot.com/2007/02/debugger-stories-stack-widget.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-2173552291981966095</guid>
  <author>Vladimir Prus</author>
  <pubDate>Wed, 31 Jan 2007 22:28:00 +0100</pubDate>
  <description>
In KDevelop 3.4, the stack widget was not changed much. I can remember just two changes­—one that is apparent and one that is subtle.
&lt;p&gt;
The apparent change is that we actually parse gdb output, and show it it a readable way, while in KDevelop 3.3 the stack frame formatting was entirely at mercy of gdb's "backtrace" command.
&lt;p&gt;
&lt;a href="http://4.bp.blogspot.com/_DUtp0m1tSPk/RcERPzkh9iI/AAAAAAAAAAc/Lct-6iWkZEU/s1600-h/stack.png"&gt;&lt;img style="margin: 0pt 10px 10px 0pt; float: left; cursor: pointer;" src="http://4.bp.blogspot.com/_DUtp0m1tSPk/RcERPzkh9iI/AAAAAAAAAAc/Lct-6iWkZEU/s400/stack.png" alt="" id="BLOGGER_PHOTO_ID_5026317622361323042" border="0" /&gt;&lt;/a&gt;
&lt;p&gt;
The subtle change is at the bottom of the screenshot—that "(click to get more frame)" thing. When a program stops, KDevelop fetches very few frames from gdb. If you click on that last item, then another chunk of frames will be fetched.
&lt;p&gt;
This behaviour is needed for two reasons. First, if your program is stuck in infinite recursion, and you try to interrupt it from KDevelop, in KDevelop 3.3 you're out of luck. As soon as the program is interrupted, KDevelop asks gdb for the list of all frames. Since your program is in infinite recursion, the number of frames is very large, and gdb is not very speedy stack-walker. So, you get to wait 5 mins for the stack to be shown. With incremental display, in a few clicks you'll see what function went astray.
&lt;p&gt;
The second reason is embarassing. Even without infinite recursion, getting the list of frames from gdb takes a lot of time. Something like half-a-second for getting 30 frames is not unheard of. Ideally, we'd fix gdb, but since we need incremental fetch anyway, fetching sufficiently small number of frames initially greatly improves responsiveness.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-2173552291981966095?l%3Dvladimir_prus.blogspot.com" alt="" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Debugger stories: Watchpoints</title>
  <link>http://vladimir_prus.blogspot.com/2006/05/debugger-stories-watchpoints.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-114906807929380237</guid>
  <author>Vladimir Prus</author>
  <pubDate>Wed, 31 May 2006 11:12:00 +0200</pubDate>
  <description>
One of my faviourite debugger changes in KDevelop 3.4 is proper watchpoint handling. Before explaining it, some introduction is due.
&lt;p&gt;
Say you're debugging and see that the 'foo' field of 'pointer_to_some_data' is completely bogus. You are sure that it was valid some time ago, like when its containing object was constructed, so the question is where the corruption happened. That's exactly what watchpoints are for. You set breakpoint at a code where 'foo' is known to be valid, and then ask the debugger to stop whenever the value of 'foo' changes. The debugger in turn writes the address of 'foo' to a special processor register, and processor will call back the operating system, and then debugger, when 'foo' changes.
&lt;p&gt;
Except that GDB does not work this way by default. If you say:
&lt;blockquote&gt;&lt;code&gt;&lt;pre&gt;
watch pointer_to_some_data-&gt;foo
&lt;/pre&gt;&lt;/code&gt;&lt;/blockquote&gt;
there are two interpretations. First is to stop when memory location referred to by &lt;code&gt;pointer_to_some_data-&gt;foo&lt;/code&gt; is modified. Second is to stop when the value of the &lt;span&gt;expression&lt;/span&gt; &lt;code&gt;pointer_to_some_data-&gt;foo&lt;/code&gt; changes, which can happen also if &lt;code&gt;pointer_to_some_data&lt;/code&gt; changes. Obviously, when debugging memory corruption, you care about memory address, and &lt;code&gt;pointer_to_some_data&lt;/code&gt; is just a way to specify the memory address. Alas, by default GDB uses the second interpretation, so to set watchpoint on address you should use:
&lt;blockquote&gt;&lt;code&gt;&lt;pre&gt;
print &amp;(pointer_to_some_data-&gt;foo)
watch *$
&lt;/pre&gt;&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;
But the problem is not just that you'll get false hits when &lt;code&gt;pointer_to_some_data&lt;/code&gt; changes. The thing is that if that variable is a local one, or a function parameter, then GDB will immediately &lt;span&gt;remove&lt;/span&gt; watchpoint when you exit the containing function. So, for KDevelop user it will be like that: you pick a local variable in a variables widget, you expand it, right-click on some member, select "Toggle watchpoint", and continue. The watchpoint you've just added immediately goes away.
&lt;p&gt;
KDevelop 3.4 solves this problem in a radical way. All watchpoints are address watchpoints. For any expression you enter, address is computed and watchpoint is set on address. Expression without address (rvalue) can't be watched and you'll get an error message if adding watchpoints for rvalue. Additionally, when the application exits, all watchpoints are disabled, because data addresses can well be different on the next run. When user decides to enable a watchpoint, the address of expression is evaluated again, and a new watchpoints is set to that address.
&lt;p&gt;
Hopefully this will make watchpoints more usable for the ordinary programmer.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-114906807929380237?l%3Dvladimir_prus.blogspot.com" alt="" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Introducing MI branch</title>
  <link>http://vladimir_prus.blogspot.com/2006/05/introducing-mi-branch.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-114655429246885688</guid>
  <author>Vladimir Prus</author>
  <pubDate>Tue, 02 May 2006 09:17:00 +0200</pubDate>
  <description>
For recent months, I was working on an internal reorganization of KDevelop debugger, informally known as "MI branch". Now that it mostly works, it's time to describe the goals and results. 
&lt;p&gt;
The original goal was to use a different interface with GDB, called "MI", that's specifically meant for frontends. In MI mode, gdb output can be easily parsed into DOM-like structure, and examined in a nice C++ way, something like:
&lt;blockquote&gt;&lt;code&gt;&lt;pre&gt;
(*last_stop_result)["value"]["old"].literal()
&lt;/pre&gt;&lt;/code&gt;&lt;/blockquote&gt;
Before, KDevelop was parsing GDB output intended for humans, and could in some cases misinterpret it. Like thinking that application is running, when it's actually stopped. This unreliability was the primary reason for switching to MI.
&lt;p&gt;
But MI is not a silver bullet. Both John Birch (original author of debugger part), and I had reservation about maturity of MI, which proved true eventually. I'll talk about this later, but basically, using MI does not automatically make debugger better, or faster, or anything, contrary to what many think. However, since using different protocol is a big code change already, I've sneaked in a number of architectural and GUI changes, hopefully for better.
&lt;p&gt;
So in the end MI branch had two goals:
&lt;ol&gt;
&lt;li&gt;Fix all glitches. Do you know that in some cases KDevelop 3.3 shows only half of local variables? Or that setting watchpoint in a natural way is rarely what you want? Or that if a program is stuck in infinite recursion, KDevelop will take minutes to show the stack? Each issue is not very significant in itself, but together they make user experience not confortable.
&lt;li&gt;Cleanup internal architecture. Original architecture was a bit too centralized and adding new features required a lot of work. And since many cool features come to mind, it's better be fixed quick.
&lt;/ol&gt;
&lt;p&gt;
The "MI branch" itself is already merged to KDevelop 3.4 branch. In future posts I'll describe all changes the debugger has compared to 3.3 release. Stay tuned.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-114655429246885688?l%3Dvladimir_prus.blogspot.com" alt="" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Non-constant size</title>
  <link>http://vladimir_prus.blogspot.com/2006/04/non-constant-size.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-114613323460364990</guid>
  <author>Vladimir Prus</author>
  <pubDate>Thu, 27 Apr 2006 11:48:00 +0200</pubDate>
  <description>
Quite some time ago, when I was learning &lt;a href="http://www.sgi.com/tech/stl/"&gt;STL&lt;/a&gt;, all information sources stressed the importance of learning complexity guarantees that methods of various containters make. One specific subtle thing is that the &lt;code&gt;std::list&lt;&gt;::size()&lt;/code&gt; method runs in &lt;span&gt;linear&lt;/span&gt; time, not in constant time. It was explicitly designed that way for a reason,  described in &lt;a href="http://www.sgi.com/tech/stl/FAQ.html"&gt;STL faq&lt;/a&gt;, but what matters to an ordinary programmer is that testing lists for emptyness should be done with the &lt;code&gt;empty&lt;/code&gt; method, not by comparing size to zero, otherwise it's easy to kill performance.
&lt;p&gt;
Today, I run into another case where non-const-time &lt;code&gt;size()&lt;/code&gt; matters. I was testing KDevelop on some testcase, and noticed that getting list of stack frames from gdb takes a lot of time. I've added some profiling code, and found that a one command takes 200ms to execute. Adding profiling code to gdb revealed that gdb itself takes some 70ms. Of course, that's not ideal, but even larger fraction of time was apparently spend in KDevelop, ehm, parsing the response.
&lt;p&gt;
So I've quickly put up a testcase that repeatedly parses a specific response, and ran it under &lt;a href="http://kcachegrind.sourceforge.net/cgi-bin/show.cgi"&gt;callgrind&lt;/a&gt;.  Ten minutes later I've got a profile with &lt;code&gt;strlen&lt;/code&gt; on  top. It turned out that the parsing code was using &lt;code&gt;QCString&lt;/code&gt; and calling it's &lt;code&gt;length&lt;/code&gt; method at least one for each token, and for certain tokens -- once for each character. The &lt;code&gt;length&lt;/code&gt;, in turn, just calls &lt;code&gt;strlen&lt;/code&gt;. Since the input string was 20K in size, most of runtime was spend measuring the size of that string. 
&lt;p&gt;Another unexpected behaviour was found in the &lt;code&gt;QCString::mid&lt;/code&gt; function. Internally, it also calls &lt;code&gt;length&lt;/code&gt;, and &lt;code&gt;mid&lt;/code&gt; was called once for each token.

&lt;p&gt;After uses of non-const-time methods were reduced to minimum, the parsing time my test case decreased 40x. No so bad, I think. The only problem is that time spend in gdb is still to high for a GUI, and that won't be that easy to fix.&lt;/span&gt;&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-114613323460364990?l%3Dvladimir_prus.blogspot.com" alt="" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>Printf debugging 2006</title>
  <link>http://vladimir_prus.blogspot.com/2006/04/printf-debugging-2006.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-114431922218203677</guid>
  <author>Vladimir Prus</author>
  <pubDate>Thu, 06 Apr 2006 11:57:00 +0200</pubDate>
  <description>
One of the oldest methods of debugging is "printf debugging" -- putting various print statements in the code and then staring at the output. That's useful not only if you can't use a debugger. If the program does not crash, but produces wrong results after long computation, it's hard to figure where exactly the problem lies. In that case, printing intermediate data can be a very efficient method.

&lt;p&gt;
The only problem is that after adding print statements the program must be recompiled, and after debugging print statements must be removed. But it's possible to make gdb into printing machine using so called "breakpoint commands". Each breakpoint can have a list of commands that will be executed when breakpoint is hit. The commands can include printing and "continue". Here's a simplified example of gdb script I've used recently:

&lt;blockquote&gt;&lt;code&gt;&lt;pre&gt;
break main.cpp:1353
commands
   print ('lvk::nm_model::NM'*)this
   printf "Entering 'run', proc %d\n", $-&gt;processor_number
   continue
end
run
&lt;/pre&gt;&lt;/code&gt;&lt;/blockquote&gt;

&lt;p&gt;
After putting this to a file "script", gdb can be run as:
&lt;blockquote&gt;&lt;code&gt;
gdb -batch -x script &lt;span&gt;name_of_program&lt;/span&gt; &gt; log
&lt;/code&gt;&lt;/blockquote&gt;
producing logs of variable values as certain points of the program.

&lt;p&gt;Starting with version 3.3.0, similar functionality is available in &lt;a href="http://kdevelop.org"&gt;KDevelop&lt;/a&gt;. Just click on the "Tracing" column in breakpoints window, select variables to print and click OK.

&lt;p align="center"&gt;
&lt;img src="http://zigzag.cs.msu.su/~ghost/images/tracing_dialog_shadow.png"&gt;&lt;/img&gt;&lt;/p&gt;

&lt;p&gt;More screenshots &lt;a href="http://kdevelop.org/graphics/screenshots/3.3/tracing2.png"&gt;here&lt;/a&gt; and &lt;a href="http://kdevelop.org/graphics/screenshots/3.3/tracing_output.png"&gt;here&lt;/a&gt;.

This is a beginning, future KDevelop version will allow to specify custom commands for breakpoints.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-114431922218203677?l%3Dvladimir_prus.blogspot.com" alt="" /&gt;&lt;/div&gt;  </description>
</item>
<item>
  <title>1 + 2</title>
  <link>http://vladimir_prus.blogspot.com/2005/07/1-2.html</link>
  <guid isPermaLink="false">tag:blogger.com,1999:blog-7558958.post-112195666121491074</guid>
  <author>Vladimir Prus</author>
  <pubDate>Thu, 21 Jul 2005 16:18:00 +0200</pubDate>
  <description>
I've just got the following:
&lt;blockquote&gt;&lt;code&gt;&lt;pre&gt;
(gdb) target remote :1234
Remote debugging using :1234
main () at main.cpp:5
5       {
(gdb) p add(1, 2)
$1 = 3
&lt;/pre&gt;&lt;/code&gt;&lt;/blockquote&gt;

As you see, using the gdb debugger I've evaluated expression &lt;code&gt;add(1,2)&lt;/code&gt;, where function &lt;code&gt;add&lt;/code&gt; presumably adds two numbers, and got the right result. What's interesting in this?

There are two interesting things:
&lt;ol&gt;
&lt;li&gt; It's gdb port to a new target.
&lt;li&gt; The remote side is not a hardware board -- it's our simulator, which was taught to talk using gdb's remote protocol
&lt;/ol&gt;

However simple the example seems, it involves several steps:
&lt;ol&gt;
&lt;li&gt; First of all, gdb must load the symbol tables. Othewise, it won't know that &lt;code&gt;add&lt;/code&gt; is a function. That did not work out of box, for example gdb assumed that program can't start at address 0.
&lt;li&gt; After connecting to the target, gdb asks about the value of program counter. This requires support for appropriate protocol command. Also, our simulator took shortcuts and did not even maintain the program counter!
&lt;li&gt; To call a function, the arguments are pushed to a temporary memory area. This requires
code that knows calling convention for the target, and memory writing support.
&lt;li&gt; After that, a fake return address is placed to a stack (typically, entry point of the program), and a breakpoint is set to that return address. So this requires working breakpoints in the simulator.
&lt;li&gt; Then, debugger changes program counter to the address of &lt;code&gt;add&lt;/code&gt; and resumes program execution. 
&lt;li&gt; After hitting breakpoint, the return value of the function is extracted, which again requires knowing calling convention.
&lt;/ol&gt;

So, it's not just a poor man's calculator, it's also a test for a good deal of debugger functionality. There's also stack frame handling (up/down/where/finish), and printing of complex data types (structures/arrays), but believe me, that works as well.

It looks like my 3-month gdb and simulator hacking comes to an end, and I'll spend more time on more interesting things like improving KDevelop's debugger frontend.&lt;div&gt;&lt;img width="1" height="1" src="https://blogger.googleusercontent.com/tracker/7558958-112195666121491074?l%3Dvladimir_prus.blogspot.com" alt="" /&gt;&lt;/div&gt;  </description>
</item>
</channel>
</rss>
