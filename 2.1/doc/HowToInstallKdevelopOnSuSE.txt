*****************************************
How To Install KDevelop 2.1.5 on Suse 8.2
*****************************************
by Walter Roth, roth@fh-swf.de
Updated 26.June.2003

Contents:
Introduction
Installing packages with yast
Installing the C-C++ Reference
Configuring the Documentation Search Engine
Activating the Hypertext Search Engine for Help
Activating the 3D Hardware for OpenGL Programming
Problems with OpenGL Libraries
Porting Existing Suse8.1 , KDevelop 2.1.3 Projects to Suse8.2, Kdevelop 2.1.5
A Sample htdig.conf File.

************
Introduction
************
This file contains step by step installation instructions. I have written down,
what I had to do on a new Suse 8.2 system. However, many KDE 3 related problems should be very similar
on other distributions.
These instructions may be a little bit lengthy, however they contain solutions for some nasty problems that
showed up on my system after a new installation of Suse 8.2.
As usual, all shell commands in the following texts, that have to be executed as root, are marked
with a # prefix, all commands that have to be executed as a simple user are marked ~ >.
(Of course, neither # nor ~> must be typed.)


******************************
Installing packages with yast:
******************************
Select Install Software, set the "Filter" list box to "Selections" and
check the following check boxes:

-development (extended)
-multimedia
-C-C++ compiler an tools
-Network/Server
If you want to develop OpenGL programs:
-Set the "Filter" list box to "Search" and search for "mesa" (of course without the quotes)
 Be shure that all mesa packages except mesa3dfx are checked.
-Set the "Filter" list box to "Search" and search for "glx"
 Be shure that XFree86-GLX-devel is *NOT* checked. If it is checked, uncheck it and refer to
 "Problems with OpenGL libraries" below.
-Start the installation by clicking the "Accept" button.


******************************
Installing the C-C++ Reference
******************************
The documentation on C and C++ is included in the file: c_cpp_reference-2.0.2.tar.bz2
This file is not included in the Suse 8.2 distribution. You can get it at www.kdevelop.org
from the Downloads page. (Or from our internal server at fh-swf.de)
-Open a console window and go to the directory into which you have downloaded the file.
-Extract this file with: tar -xvjf c_cpp_reference-2.0.2.tar.bz2
In the new directory c_cpp_reference-2.0.2 you find the installation instructions in the
INSTALL file. However, you have to enter quite a lot of parameters, to get configure
working correctly. The following command sequence should work:
~ > cd c_cpp_reference-2.0.2
~ > ./configure --with-kde-version=3 --with-qt-dir=/usr/lib/qt3 --prefix=/opt/kde3
~ > make
Before you do the real installation, it might be useful to find out, where make wants to
install the files. Therefore, enter the make install command as simple user.
~ > make install
Now you get a couple of error messages, that show, which directories should be created.
The installation directories should be subdirectories of:
/opt/kde3/share/doc/HTML/en/kdevelop/reference
If not OK, run configure again with the correct --prefix parameter.
Now log in as root.
~ > su
Enter root password, and run make install again.
#  make install
#  exit
This time, lots of files are installed. You may now check
/opt/kde3/share/doc/HTML/en/kdevelop/reference
for what has been installed there. Within KDevelop, clicking Help/C C++ Reference
now shows the index page of the reference.


*******************************************
Configuring the Documentation Search Engine
*******************************************
This is not as straightforward as it should be, because there are some hardcoded paths in
KDevelop 2.xx. It is best to stick closely to the following procedure.

In order to be able to index the KDE API documentation, you have to create a dummy file to
convince Kdevelop, that the KDE API docs are installed.
-Be shure that you have installed the kdelibs3-devel-doc and the qt3-devel-doc packages.
Create the dummy file with Konqueror:
-Click right somewhere on the screen, select Run Command from the local menu and enter
kdesu konqueror
Enter the root password. When Konqueror pops up in root mode, go to the directory
/opt/kde3/share/doc/HTML/en/kdelibs-apidocs/kdeui
Click Edit/Create New/HTML-File
Enter KDialog.html into the new file dialog window and click OK.
A file KDialog.html should appear in Konqueror.
KDevelop searches for the file
/opt/kde3/share/doc/HTML/en/kdelibs-apidocs/kdeui/KDialog.html
when trying to index the kde libs documentation. (The problem is, that in KDE 3.1 the file has been moved to kdeui/html/classKDialog.html)

***********************************************
Activating the Hypertext Search Engine for Help
***********************************************
Indexing the documentation with htdig is quite hard to do. And unfortunately, under Suse 8.2 Kdevelop's setup
program fails to do so. So it's all work to be done by hand. However, once the documentation has
been indexed, you can use the text search features of Kdevelop's help menu. This makes searching
for help MUCH easier.
Because it is quite a lengthy procedure, here comes the
very short version:
Start apache, make it follow symlinks.
Create symlimks to the documentation in the server's document root.
Create a directory for the database, preferably in your home directory.
Create a suitable htdig.conf in Kdevelop's tools directory ( available at the end of this file)
Create a symlink to htsearch in /usr/lib
Run the rundig script with your htdig.conf to index the docs.
From Kdevelop's Help menu search for help on the topic you want to see.

Now the detailed version:

Starting Apache
***************
Before hypertext search works, you have to start the apache server:
-Select the system icon in the left column of the Yast control center.
-Select the runlevel editor in the right window.
-Select runlevel 5
-Click the Runlevel Properties button
-Select the line for apache (it should be switched off)
-In the checkboxes at the bottom of the page, check runlevels 3 and 5
-Click the big Start button an the lower left
-A window with the text "apache start "should pop up.
-Click the finish button.
-Open a new Konqueror window.
-Enter http://localhost in the Location: edit field.
-If you see a dancing penguin, everything is Ok and the apache server is running.
-If not, check whether the httpd daemon is running. A message "starting httpd" has to appear on boot.

Making Apache Follow Symlinks
***************************************
You have to modify the apache configuration file etc/httpd/httpd.conf, so that htdig can
find the documentation. For safety, make a backup copy of the file prior to editing.
-Click right somewhere on the screen background and select "Run command"
-To run Konqueror as root type: kdesu konqueror
-With the root Konqueror go to /etc/httpd
-Click on httpd.conf. A KWrite editor pops up. From its main menu select File/Save As and save the file as
 httpd.conf.bak. For saftety, close the edit window.
-Click on httpd.conf. A KWrite editor pops up. From its menu select Edit/Find and search for "DocumentRoot:"
 (without the quotes). This should lead you to a comment at the beginning of the Document root section.
 The line
 DocumentRoot "srv/www/htdocs"
 follows 4 lines later.
-Now search (twice)for "srv/www/htdocs" or whatever DocumentRoot directory is. This should
 lead you to a line <Directory "/srv/www/htdocs">. (line 467 in my case) It is the beginning of the section that specifies privileges and options for the main server directory. A few lines later, you find the line
     Options Indexes -FollowSymLinks +Includes MultiViews
-Change -FollowSymLinks to +FollowSymLinks
 This allows the server to follow symbolic links, in our case the links to the QT and KDE documentation.
-Save the file as httpd.conf.
-Restart apache. To do so:
-Open a console, type: su
 log in as root and then type:
 # rcapache restart

Creating Symlinks to the Docs
*****************************
-As root, you have to create 2 symbolic links in /srv/www/htdocs. Type:
 # cd /srv/www/htdocs
 # ln -s /opt/kde3/share/doc/HTML/en/kdelibs-apidocs kdedocs
 # ln -s /opt/kde3/share/doc/HTML/en/kdevelop/reference cppdocs
 # ln -s /usr/lib/qt3/doc/html qtdocs
 This creates symbolic links to the kdelibs, the C++ reference and the qtlib documentation.
 Now you are ready to start indexing. However, it is best to check a few things first.
 Verify, that the links lead to the respective documentation.
 To do this, use Konqueror. In the main menu check View/Use Index.html.
 Now go to /srv/www/htdocs and click on the links. If everything is ok, the index pages for Kdelibs and QT have
 to be displayed.
 Now try whether apache follows the links. Enter: httpd://localhost/qtdocs into Konqueror's url edit field.
 This must display the QT index page.
 If not:
         If you get a message like: "could not connect to local host", apache is not active.
 	 start kpm and look for the httpd daemon (apache). If it is not running, restart apache.
         check httpd.conf and restart apache.
         check the spelling in all symlinks and directories
	 If you get a message like: Forbidden...
	 Check whether you changed the right +FollowSymlinks, the one for the main <Directory ...>
	 (there are several FollowSymlinks in httpd.conf)
	 read the htdig documentation (/usr/share/doc/packages/htdig)
	 read the apache documentation (/srv/www/htdocs/manual)
Advanced:
If you know how to do this, it might be a good idea to set up a virtual host in apache only for indexing.

Creating a htdig.conf file
**************************
For convenience, a htdig.conf file is attached at the end of this document.
-With a Konqueror running as root, go to the directory that contains this How To file.
-Click on this file and open it for editing with KWrite.
-Remove all the text down to the line: Example htdig.conf file.
-Go to the line starting with: database_dir
-replace YOUR_HOME_DIR with the correct name for your home directory.
-uncomment the start_url and limit_urls_to line pairs, that you want to use for indexing,
 or create your own lines. In the example file, the lines for indexing the qt libs only are activated. There are lines available for indexing qt libs, kdelibs and C reference. (See htdig documentation)
-Save the remaining configuration file as:
/opt/kde3/share/apps/kdevelop/tools/htdig.conf

-Open a new Konqueror window for your home directory. Select View/Show Hidden Files
-Go to the directory (the name of the hidden kde directory starts with a dot . )
.kde/share/apps/kdevelop/
-Create the following directories with Konqueror Edit/Create New/Directory:
/home/YOUR_HOME_DIR/.kde/share/apps/kdevelop/htdig
/home/YOUR_HOME_DIR/.kde/share/apps/kdevelop/htdig/db
To make the db directory writeable for all:
-click right on the directory icon, select properties, select the Permissions tab and check all boxes in the Write column.
Now you are ready to run the Kdevelop setup program.

Running the  Kdevelop setup program
***********************************
-From the KMenu in the lower left corner of the screen select: Development/IDE/KDevelop-Setup.
-Run the setup program. It starts with an introduction window. Click next.
-Select your favourite syntax marking. Click next.
-Select your favourite interface mode. Click next.
The next screen shows the result of the software search.
***ALL programs in the list except glimpse and glimpseindex MUST have been found on your system. If not, KDevelop will not work properly. ***
Prior to continuing with setup, install any missing programs with Yast. (Use the search mode of the selections tab on Yast's Install Software page, to locate the missing packages.)
-When all the software has been found, click next.
Now setup should report, that it has found the QT-documentation. (If not, install the qt3-devel-doc package.) Click next. 
Now setup should report, that it has NOT found the KDE libs-documentation. (Don't care. You can not enter the correct path here.  Fix this later on.) Click next.
-Skip the indexing by clicking next on the indexing page.
-Click finish.

Now KDevelop will start automatically. At this point, KDevelop is already useable.
However, the help system needs some extra configuration.

-From the Kdevelop's main menu select Options/Kdevelop Setup.
-Select the documentation Icon in the left column of the dialog.
-This time you can enter the correct path to the KDElibs documentation:
/opt/kde3/share/doc/HTML/en/kdelibs-apidocs
- After you have entered (or have browsed to) the Kdelibs-doc path, click the Create button.
- Start the indexing. It will not work properly, but it will convince KDevelop, that an index exists. An existing index will be damaged. It has to be restored by the following procedure.

To create a working index, start indexing from a console.
-Open a console, login as root. Alternatively to logging in as root, you may change the permissions of /var/lib/htdig/db to writeable for all. Don't forget to remove the write permissions for group and others after indexing is finished.
As root type:
# rundig -c /opt/kde3/share/apps/kdevelop/tools/htdig.conf -vvv
This starts htdig and htmerge and creates lots (thousands) of messages. On my 866MHz, 256MB sytem it took about 10 minutes to index the qtlibs only. The total amount of data created was 27.3MB. If your system seems to hang, don't worry, the sorter htmerge creates only a few messages but puts a heavy load on CPU and disc.
If the process stops rather quickly, something must be wrong.
In this case, the messages dislpayed so far can be helpful. Refer to the faq section of
the htdig documentation. It is also a good idea to check the htdig.conf file for a matching pair of start_url and limit_urls_to lines.
Be shure that the  database_dir as specified in htdig.conf, exists and is writeable to all.
If you get a message like: /usr/bin/sort  could not cretate temporaray file:
/var/lib/htdig/db/sort....
Run rundig as root or change the permissions of /var/lib/htdig/db to writeable for all.
The documentation on ht://Dig can be found at: www.htdig.org. A local copy should have been installed in /usr/share/doc/packages/htdig.


Finally you have to help KDevelop to find the search engine.
-Open a console window and log in as root.
# cd /usr/bin
-Make a link to the new location of htsearch by typing:
# ln -s /srv/www/cgi-bin/htsearch htsearch
-To log out, type:
# exit
The link is necessary, because KDevelop expects htsearch to be in /usr/bin.
Start KDevelop, select Options/KDevelop Setup. Select Documentation and click the Create button on the right of Search Database. The process will create a lot of error messages, however it will convince KDevelop, that there is a search database.

That's it. The hypertext search from the KDevelop help menu should work now.

*************************************************
Activating the 3D Hardware for OpenGL Programming
*************************************************
When the SAX utility asks you, whether you want to have 3D Acceleration activated,
check the respective box.
Prior to installing the nvidia drivers, make a backup copy of the files:
/usr/lib/libglu.la and /usr/lib/libgl.la
The installer might delete these files. If this has happend, see below for how to fix it.
If you own an nvidia grafics card, get the nvidia drivers from nvidia.com and
install them with the installation program supplied by nvidia. There is a very
good installation guide (some 70 pages) in the nvidia readme file.
However, on my system installation was quite straightforward.
After that, run the SAX utility again. It should prompt you, whether you want the
nvidia drivers to be activated. Once the nvidia driver is running, it shows a startup
screen with a big "nvidia" in the center, when the XServer is started. Run the gears program,
to ensure, that the acceleration works properly. In case of trouble, there is a 3Ddiag program
in /usr/bin, that might be useful to locate the problem.

*******************************
Problems with OpenGL Libraries
*******************************
When compiling OpenGL programs, that need libglut or libglu, you get linker errors due to a
missing libGL.la.
This may happen, because libGL.la was deleted by the 3D hardware installation program.
To fix this, start yast and delete the package mesa-devel.
After mesa-devel has been deinstalled, install it again. Mesa-devel contains libGL.la.
However, if you do not deinstall the package prior to an installation, the missing lib
will not be copied to your harddisk.
After that, check the directory /usr/lib, whether libGL.la and libGL.a exist.
Check, whether a symbolic link /usr/lib/libGL.so exists. If not, create it as follows:
	-log in as root (or use su)
	-# cd /usr/lib
	-# ln -s libGL.so libGL.so.1.0.4349
	-# logout (or exit)
After that, OpenGl programs should compile.

*****************************************************************************
Porting Existing Suse8.1 , KDevelop 2.1.3 Projects to Suse8.2, Kdevelop 2.1.5
*****************************************************************************
Because the QT version, the KDE version and the automake/autoconf versions have changed,
the configure.in and cvs.sh files of your projects have to be upgraded.
We used to do the following with KDevelop 2.1.3 projects:
(For projects older than KDevelop 2.1.3 and others see below.)
- Create a source distribution of all old projects on the old system.
- Alternatively, delete all .o , *.moc* files manually.
- Expand your source tgz file.
- Open the project with KDevelop 2.1.5
- Search in the configure.in file for the line:
dnl add here all your Makefiles. This are created by configure

The following line contains all makefiles, that have to be created by aoutoconf.
The project's name is myproject.
AC_OUTPUT(Makefile myproject/Makefile myproject/docs/Makefile myproject/docs/en/Makefile )

Replace this line with the new autoconf syntax with an extra AC_CONFIG_FILES line for every
makefile. AC_OUTPUT is called without arguments as last line.:

AC_CONFIG_FILES([ Makefile ])
AC_CONFIG_FILES([ myproject/Makefile ])
AC_CONFIG_FILES([ myproject/docs/Makefile ])
AC_CONFIG_FILES([ myproject/docs/en/Makefile ])
AC_OUTPUT

- Go to the admin directory. Open the file cvs.sh.
Search for the line:
  automake*1.5* | automake*1.5-* | automake*1.6.*  ) : ;;
add | automake *1.7* so that it looks like this:
  automake*1.5* | automake*1.5-* | automake*1.6.* | automake*1.7.* ) : ;;

- Now start autoconf, configure and make from within KDevelop 2.1.5


For older KDevelop projects, and for other projects (like Visual Studio projects)
proceed as follows:
-Create a new (QT SDI)project with the correct project name (e.g. MyProject) with KDevelop 2.1.5.
-Select the Files tab in the tree view at the left of the screen.
-expand the myproject directory node
-click right on every .h and .cpp file (7 files, including main.cpp)and select:
 remove file from disc.
Now you have an empty project frame.
-From the main menu, select Project/Add Existing Files and add all source files of your old project.
-After that select Build/Autoconf, Build/Configure and Build/Run
-Hopefully your old project will now be compiled and run. If you have a QT project, that has been developed with MS Visual Studio, you will need to remove or deactivate the MSCD_VER statements. And of course, there are no WinApi functions on a Unix system ;).
-If your project has subdirectories in the source directory, you have to add an
AC_CONFIG_FILES([ myproject/subdirectory/Makefile ])
statement for every subdirectory into the configure.in file manually.


*********************************************************************************************************

Use the following text as htdig.conf file(see above).

#
# Example config file for ht://Dig.
#
# This configuration file is used by all the programs that make up ht://Dig.
# Please refer to the attribute reference manual for more details on what
# can be put into this file.  (http://www.htdig.org/confindex.html)
# Note that most attributes have very reasonable default values so you
# really only have to add attributes here if you want to change the defaults.
#
# What follows are some of the common attributes you might want to change.
#

#
# Specify where the database files need to go.  Make sure that there is
# plenty of free disk space available for the databases.  They can get
# pretty big.
#
database_dir:    /home/YOUR_HOME_DIR/.kde/share/apps/kdevelop/htdig/db

#
# This specifies the URL where the robot (htdig) will start.  You can specify
# multiple URLs here.  Just separate them by some whitespace.
# The example here will cause the ht://Dig homepage and related pages to be
# indexed.
# You could also index all the URLs in a file like so:
# start_url:	       `${common_dir}/start.url`
#
# Index kedlibs, C, CPP reference and qtlibs
#start_url:	http://localhost/qtdocs/index.html http://localhost/cppdocs/C/cref.html http://localhost/cppdocs/CPLUSPLUS/cref.html http://localhost/kdelibsdocs/index.html
# Index kedlibs and qtlibs
#start_url:	http://localhost/qtdocs/index.html http://localhost/kdelibsdocs/index.html
#index qtlibs only
start_url:	http://localhost/qtdocs/index.html
#
# This attribute limits the scope of the indexing process.  The default is to
# set it to the same as the start_url above.  This way only pages that are on
# the sites specified in the start_url attribute will be indexed and it will
# reject any URLs that go outside of those sites.
#
# Keep in mind that the value for this attribute is just a list of string
# patterns. As long as URLs contain at least one of the patterns it will be
# seen as part of the scope of the index.
#
#
# Index kedlibs, C, CPP reference and qtlibs
# limit_urls_to:		qtdocs ccpdocs kdelibsdocs
#
# Index kedlibs and qtlibs
# limit_urls_to:		qtdocs kdelibsdocs
#
#index qtlibs only
limit_urls_to:		qtdocs

#
# If there are particular pages that you definitely do NOT want to index, you
# can use the exclude_urls attribute.  The value is a list of string patterns.
# If a URL matches any of the patterns, it will NOT be indexed.  This is
# useful to exclude things like virtual web trees or database accesses.  By
# default, all CGI URLs will be excluded.  (Note that the /cgi-bin/ convention
# may not work on your web server.  Check the  path prefix used on your web
# server.)
#
exclude_urls:		/cgi-bin/ .cgi

#
# Since ht://Dig does not (and cannot) parse every document type, this
# attribute is a list of strings (extensions) that will be ignored during
# indexing. These are *only* checked at the end of a URL, whereas
# exclude_url patterns are matched anywhere.
#
bad_extensions:		.wav .gz .z .sit .au .zip .tar .hqx .exe .com .gif \
	.jpg .jpeg .aiff .class .map .ram .tgz .bin .rpm .mpg .mov .avi .css

#
# The string htdig will send in every request to identify the robot.  Change
# this to your email address.
#
maintainer:		unconfigured@htdig.searchengine.maintainer

#
# The excerpts that are displayed in long results rely on stored information
# in the index databases.  The compiled default only stores 512 characters of
# text from each document (this excludes any HTML markup...)  If you plan on
# using the excerpts you probably want to make this larger.  The only concern
# here is that more disk space is going to be needed to store the additional
# information.  Since disk space is cheap (! :-)) you might want to set this
# to a value so that a large percentage of the documents that you are going
# to be indexing are stored completely in the database.  At SDSU we found
# that by setting this value to about 50k the index would get 97% of all
# documents completely and only 3% was cut off at 50k.  You probably want to
# experiment with this value.
# Note that if you want to set this value low, you probably want to set the
# excerpt_show_top attribute to false so that the top excerpt_length characters
# of the document are always shown.
#
max_head_length:	10000

#
# To limit network connections, ht://Dig will only pull up to a certain limit
# of bytes. This prevents the indexing from dying because the server keeps
# sending information. However, several FAQs happen because people have files
# bigger than the default limit of 100KB. This sets the default a bit higher.
# (see <http://www.htdig.org/FAQ.html> for more)
#
max_doc_size:		200000

#
# Most people expect some sort of excerpt in results. By default, if the
# search words aren't found in context in the stored excerpt, htsearch shows
# the text defined in the no_excerpt_text attribute:
# (None of the search words were found in the top of this document.)
# This attribute instead will show the top of the excerpt.
#
no_excerpt_show_top:	true

#
# Depending on your needs, you might want to enable some of the fuzzy search
# algorithms.  There are several to choose from and you can use them in any
# combination you feel comfortable with.  Each algorithm will get a weight
# assigned to it so that in combinations of algorithms, certain algorithms get
# preference over others.  Note that the weights only affect the ranking of
# the results, not the actual searching.
# The available algorithms are:
#	accents
#	exact
#	endings
#	metaphone
#	prefix
#	soundex
#	substring
#	synonyms
# By default only the "exact" algorithm is used with weight 1.
# Note that if you are going to use the endings, metaphone, soundex, accents,
# or synonyms algorithms, you will need to run htfuzzy to generate
# the databases they use.
#
search_algorithm:	exact:1 synonyms:0.5 endings:0.1

#
# The following are the templates used in the builtin search results
# The default is to use compiled versions of these files, which produces
# slightly faster results. However, uncommenting these lines makes it
# very easy to change the format of search results.
# See <http://www.htdig.org/hts_templates.html> for more details.
#
# template_map: Long long ${common_dir}/long.html \
#		Short short ${common_dir}/short.html
# template_name: long

#
# The following are used to change the text for the page index.
# The defaults are just boring text numbers.  These images spice
# up the result pages quite a bit.  (Feel free to do whatever, though)
#
next_page_text:		<img src="images/buttonr.gif" border="0" align="middle" width="30" height="30" alt="next">
no_next_page_text:
prev_page_text:		<img src="images/buttonl.gif" border="0" align="middle" width="30" height="30" alt="prev">
no_prev_page_text:
page_number_text:	'<img src="images/button1.gif" border="0" align="middle" width="30" height="30" alt="1">' \
			'<img src="images/button2.gif" border="0" align="middle" width="30" height="30" alt="2">' \
			'<img src="images/button3.gif" border="0" align="middle" width="30" height="30" alt="3">' \
			'<img src="images/button4.gif" border="0" align="middle" width="30" height="30" alt="4">' \
			'<img src="images/button5.gif" border="0" align="middle" width="30" height="30" alt="5">' \
			'<img src="images/button6.gif" border="0" align="middle" width="30" height="30" alt="6">' \
			'<img src="images/button7.gif" border="0" align="middle" width="30" height="30" alt="7">' \
			'<img src="images/button8.gif" border="0" align="middle" width="30" height="30" alt="8">' \
			'<img src="images/button9.gif" border="0" align="middle" width="30" height="30" alt="9">' \
			'<img src="images/button10.gif" border="0" align="middle" width="30" height="30" alt="10">'
#
# To make the current page stand out, we will put a border around the
# image for that page.
#
no_page_number_text:	'<img src="images/button1.gif" border="2" align="middle" width="30" height="30" alt="1">' \
			'<img src="images/button2.gif" border="2" align="middle" width="30" height="30" alt="2">' \
			'<img src="images/button3.gif" border="2" align="middle" width="30" height="30" alt="3">' \
			'<img src="images/button4.gif" border="2" align="middle" width="30" height="30" alt="4">' \
			'<img src="images/button5.gif" border="2" align="middle" width="30" height="30" alt="5">' \
			'<img src="images/button6.gif" border="2" align="middle" width="30" height="30" alt="6">' \
			'<img src="images/button7.gif" border="2" align="middle" width="30" height="30" alt="7">' \
			'<img src="images/button8.gif" border="2" align="middle" width="30" height="30" alt="8">' \
			'<img src="images/button9.gif" border="2" align="middle" width="30" height="30" alt="9">' \
			'<img src="images/button10.gif" border="2" align="middle" width="30" height="30" alt="10">'

# local variables:
# mode: text
# eval: (if (eq window-system 'x) (progn (setq font-lock-keywords (list '("^#.*" . font-lock-keyword-face) '("^[a-zA-Z][^ :]+" . font-lock-function-name-face) '("[+$]*:" . font-lock-comment-face) )) (font-lock-mode)))
# end:


